
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  000034fc  00003590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  00800184  00800184  000036b4  2**0
                  ALLOC
  3 .stab         00002598  00000000  00000000  000036b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003b44  00000000  00000000  00005c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00009790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00009910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00009ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000baf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000cc62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000dc64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000de04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000e0c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e973  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3e       	cpi	r26, 0xE0	; 224
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 09 	call	0x13ba	; 0x13ba <main>
      8a:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ed 57       	subi	r30, 0x7D	; 125
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <calc_init>:
 * - get values from the keypad and display it on the LCD
 * - form the multi-digit numbers and store them in the operands array
 * - store the operators in the operators array
 * - calls the calculate function on pressing =*/
void calc_init(void)
{
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	60 97       	sbiw	r28, 0x10	; 16
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
	uint8 i, pressedKey;
	/*pressing '=' only will break the infinite loop*/
	while (1)
	{
		/*get the pressed key value from the keypad*/
		pressedKey = KEYPAD_getPressedKey();
     cee:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <KEYPAD_getPressedKey>
     cf2:	8f 87       	std	Y+15, r24	; 0x0f

		/*call the calculate function on finishing entering the operation*/
		if (pressedKey == '=')
     cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf6:	8d 33       	cpi	r24, 0x3D	; 61
     cf8:	69 f4       	brne	.+26     	; 0xd14 <calc_init+0x3e>
		{
			calculate();
     cfa:	0e 94 99 07 	call	0xf32	; 0xf32 <calculate>
				operands_counter++; /*The digits of the number will be completed on having an operator so increment operand counter to store next operand value*/
			}
		}
		_delay_ms(300); /*small delay for debounce*/
	}
}
     cfe:	60 96       	adiw	r28, 0x10	; 16
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret
		if (pressedKey == '=')
		{
			calculate();
			break; // Exit the loop when '=' is pressed
		}
		else if (pressedKey == 'c')
     d14:	8f 85       	ldd	r24, Y+15	; 0x0f
     d16:	83 36       	cpi	r24, 0x63	; 99
     d18:	e1 f5       	brne	.+120    	; 0xd92 <calc_init+0xbc>
		{
			/*clear the display screen*/
			LCD_clearScreen();
     d1a:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_clearScreen>

			/*erase all values in both arrays and wait for new input*/
			for(i = 0; i < operands_counter + 1; i++)
     d1e:	18 8a       	std	Y+16, r1	; 0x10
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <calc_init+0x6e>
			{
				operands[i] = 0;
     d22:	88 89       	ldd	r24, Y+16	; 0x10
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	fc 01       	movw	r30, r24
     d32:	ec 57       	subi	r30, 0x7C	; 124
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	10 82       	st	Z, r1
     d38:	11 82       	std	Z+1, r1	; 0x01
     d3a:	12 82       	std	Z+2, r1	; 0x02
     d3c:	13 82       	std	Z+3, r1	; 0x03
		{
			/*clear the display screen*/
			LCD_clearScreen();

			/*erase all values in both arrays and wait for new input*/
			for(i = 0; i < operands_counter + 1; i++)
     d3e:	88 89       	ldd	r24, Y+16	; 0x10
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	88 8b       	std	Y+16, r24	; 0x10
     d44:	88 89       	ldd	r24, Y+16	; 0x10
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	80 91 c8 01 	lds	r24, 0x01C8
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	28 17       	cp	r18, r24
     d56:	39 07       	cpc	r19, r25
     d58:	24 f3       	brlt	.-56     	; 0xd22 <calc_init+0x4c>
			{
				operands[i] = 0;
			}
			for(i = 0; i < operators_counter + 1; i++)
     d5a:	18 8a       	std	Y+16, r1	; 0x10
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <calc_init+0x9c>
			{
				operators[i] = 0;
     d5e:	88 89       	ldd	r24, Y+16	; 0x10
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	fc 01       	movw	r30, r24
     d66:	e1 53       	subi	r30, 0x31	; 49
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	10 82       	st	Z, r1
			/*erase all values in both arrays and wait for new input*/
			for(i = 0; i < operands_counter + 1; i++)
			{
				operands[i] = 0;
			}
			for(i = 0; i < operators_counter + 1; i++)
     d6c:	88 89       	ldd	r24, Y+16	; 0x10
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	88 8b       	std	Y+16, r24	; 0x10
     d72:	88 89       	ldd	r24, Y+16	; 0x10
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	80 91 c9 01 	lds	r24, 0x01C9
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	28 17       	cp	r18, r24
     d84:	39 07       	cpc	r19, r25
     d86:	5c f3       	brlt	.-42     	; 0xd5e <calc_init+0x88>
			{
				operators[i] = 0;
			}
			operands_counter = 0;
     d88:	10 92 c8 01 	sts	0x01C8, r1
			operators_counter = 0;
     d8c:	10 92 c9 01 	sts	0x01C9, r1
     d90:	5d c0       	rjmp	.+186    	; 0xe4c <calc_init+0x176>
		}
		else
		{
			if ((pressedKey >= 0) && (pressedKey <= 9))
     d92:	8f 85       	ldd	r24, Y+15	; 0x0f
     d94:	8a 30       	cpi	r24, 0x0A	; 10
     d96:	c0 f5       	brcc	.+112    	; 0xe08 <calc_init+0x132>
			{
				/*if key is a number display it and apply the formula for concatenating the digits*/
				LCD_integerToString(pressedKey);
     d98:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_integerToString>
				operands[operands_counter] = operands[operands_counter] * 10 + (pressedKey);
     da2:	80 91 c8 01 	lds	r24, 0x01C8
     da6:	08 2f       	mov	r16, r24
     da8:	10 e0       	ldi	r17, 0x00	; 0
     daa:	80 91 c8 01 	lds	r24, 0x01C8
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	fc 01       	movw	r30, r24
     dbc:	ec 57       	subi	r30, 0x7C	; 124
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	a2 81       	ldd	r26, Z+2	; 0x02
     dc6:	b3 81       	ldd	r27, Z+3	; 0x03
     dc8:	2a e0       	ldi	r18, 0x0A	; 10
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 bf 19 	call	0x337e	; 0x337e <__mulsi3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	a0 e0       	ldi	r26, 0x00	; 0
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	28 0f       	add	r18, r24
     de8:	39 1f       	adc	r19, r25
     dea:	4a 1f       	adc	r20, r26
     dec:	5b 1f       	adc	r21, r27
     dee:	c8 01       	movw	r24, r16
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	fc 01       	movw	r30, r24
     dfa:	ec 57       	subi	r30, 0x7C	; 124
     dfc:	fe 4f       	sbci	r31, 0xFE	; 254
     dfe:	20 83       	st	Z, r18
     e00:	31 83       	std	Z+1, r19	; 0x01
     e02:	42 83       	std	Z+2, r20	; 0x02
     e04:	53 83       	std	Z+3, r21	; 0x03
     e06:	22 c0       	rjmp	.+68     	; 0xe4c <calc_init+0x176>
			}
			else if( (pressedKey == 'x') || (pressedKey == '%') || (pressedKey == '+') || (pressedKey == '-'))
     e08:	8f 85       	ldd	r24, Y+15	; 0x0f
     e0a:	88 37       	cpi	r24, 0x78	; 120
     e0c:	49 f0       	breq	.+18     	; 0xe20 <calc_init+0x14a>
     e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e10:	85 32       	cpi	r24, 0x25	; 37
     e12:	31 f0       	breq	.+12     	; 0xe20 <calc_init+0x14a>
     e14:	8f 85       	ldd	r24, Y+15	; 0x0f
     e16:	8b 32       	cpi	r24, 0x2B	; 43
     e18:	19 f0       	breq	.+6      	; 0xe20 <calc_init+0x14a>
     e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1c:	8d 32       	cpi	r24, 0x2D	; 45
     e1e:	b1 f4       	brne	.+44     	; 0xe4c <calc_init+0x176>
			{
				/*if key is an operator display it and save it in the array */
				LCD_displayCharacter(pressedKey);
     e20:	8f 85       	ldd	r24, Y+15	; 0x0f
     e22:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_displayCharacter>
				operators[operators_counter] = pressedKey;
     e26:	80 91 c9 01 	lds	r24, 0x01C9
     e2a:	88 2f       	mov	r24, r24
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	fc 01       	movw	r30, r24
     e30:	e1 53       	subi	r30, 0x31	; 49
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	8f 85       	ldd	r24, Y+15	; 0x0f
     e36:	80 83       	st	Z, r24
				operators_counter++; /*increment operators counter for next operator*/
     e38:	80 91 c9 01 	lds	r24, 0x01C9
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	80 93 c9 01 	sts	0x01C9, r24
				operands_counter++; /*The digits of the number will be completed on having an operator so increment operand counter to store next operand value*/
     e42:	80 91 c8 01 	lds	r24, 0x01C8
     e46:	8f 5f       	subi	r24, 0xFF	; 255
     e48:	80 93 c8 01 	sts	0x01C8, r24
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a6 e9       	ldi	r26, 0x96	; 150
     e52:	b3 e4       	ldi	r27, 0x43	; 67
     e54:	8b 87       	std	Y+11, r24	; 0x0b
     e56:	9c 87       	std	Y+12, r25	; 0x0c
     e58:	ad 87       	std	Y+13, r26	; 0x0d
     e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e60:	8d 85       	ldd	r24, Y+13	; 0x0d
     e62:	9e 85       	ldd	r25, Y+14	; 0x0e
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a e7       	ldi	r20, 0x7A	; 122
     e6a:	55 e4       	ldi	r21, 0x45	; 69
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8f 83       	std	Y+7, r24	; 0x07
     e76:	98 87       	std	Y+8, r25	; 0x08
     e78:	a9 87       	std	Y+9, r26	; 0x09
     e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	2c f4       	brge	.+10     	; 0xe9e <calc_init+0x1c8>
		__ticks = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <calc_init+0x246>
	else if (__tmp > 65535)
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	57 e4       	ldi	r21, 0x47	; 71
     eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	4c f5       	brge	.+82     	; 0xf08 <calc_init+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	0f c0       	rjmp	.+30     	; 0xefe <calc_init+0x228>
     ee0:	80 e9       	ldi	r24, 0x90	; 144
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <calc_init+0x216>
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f7       	brne	.-38     	; 0xee0 <calc_init+0x20a>
     f06:	f3 ce       	rjmp	.-538    	; 0xcee <calc_init+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <calc_init+0x252>
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	de ce       	rjmp	.-580    	; 0xcee <calc_init+0x18>

00000f32 <calculate>:
	}
}

/*calculate the operands according to the precedence of the operators*/
void calculate(void)
{
     f32:	cf 92       	push	r12
     f34:	df 92       	push	r13
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <calculate+0x12>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	uint8 i,j;
	/*loop on operators array to apply 'x' & '%' first */
	for(i = 0 ; i < operators_counter ; i++)
     f48:	1a 82       	std	Y+2, r1	; 0x02
     f4a:	24 c1       	rjmp	.+584    	; 0x1194 <calculate+0x262>
	{
		if(operators[i] == 'x')
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fc 01       	movw	r30, r24
     f54:	e1 53       	subi	r30, 0x31	; 49
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	80 81       	ld	r24, Z
     f5a:	88 37       	cpi	r24, 0x78	; 120
     f5c:	09 f0       	breq	.+2      	; 0xf60 <calculate+0x2e>
     f5e:	73 c0       	rjmp	.+230    	; 0x1046 <calculate+0x114>
		{
			/*apply multiplication in the same place of the first operand*/
			operands[i] *= operands[i+1];
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	c8 2e       	mov	r12, r24
     f64:	dd 24       	eor	r13, r13
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	fc 01       	movw	r30, r24
     f76:	ec 57       	subi	r30, 0x7C	; 124
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	e0 80       	ld	r14, Z
     f7c:	f1 80       	ldd	r15, Z+1	; 0x01
     f7e:	02 81       	ldd	r16, Z+2	; 0x02
     f80:	13 81       	ldd	r17, Z+3	; 0x03
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	fc 01       	movw	r30, r24
     f94:	ec 57       	subi	r30, 0x7C	; 124
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	20 81       	ld	r18, Z
     f9a:	31 81       	ldd	r19, Z+1	; 0x01
     f9c:	42 81       	ldd	r20, Z+2	; 0x02
     f9e:	53 81       	ldd	r21, Z+3	; 0x03
     fa0:	c8 01       	movw	r24, r16
     fa2:	b7 01       	movw	r22, r14
     fa4:	0e 94 bf 19 	call	0x337e	; 0x337e <__mulsi3>
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	c6 01       	movw	r24, r12
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	fc 01       	movw	r30, r24
     fb8:	ec 57       	subi	r30, 0x7C	; 124
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	20 83       	st	Z, r18
     fbe:	31 83       	std	Z+1, r19	; 0x01
     fc0:	42 83       	std	Z+2, r20	; 0x02
     fc2:	53 83       	std	Z+3, r21	; 0x03

			/*operators counter < operands counter by 1 so it is the required value for <<*/
			for(j = i; j < operators_counter; j++)
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	33 c0       	rjmp	.+102    	; 0x1030 <calculate+0xfe>
			{
				/*shift all operators after current used operator to left*/
				operators[j] = operators[j+1];
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	fc 01       	movw	r30, r24
     fda:	e1 53       	subi	r30, 0x31	; 49
     fdc:	fe 4f       	sbci	r31, 0xFE	; 254
     fde:	80 81       	ld	r24, Z
     fe0:	f9 01       	movw	r30, r18
     fe2:	e1 53       	subi	r30, 0x31	; 49
     fe4:	fe 4f       	sbci	r31, 0xFE	; 254
     fe6:	80 83       	st	Z, r24
				/*shift all operands after this stored value to the left*/
				operands[j+1] = operands[j+2];
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	bc 01       	movw	r22, r24
     ff0:	6f 5f       	subi	r22, 0xFF	; 255
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 96       	adiw	r24, 0x02	; 2
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	fc 01       	movw	r30, r24
    1006:	ec 57       	subi	r30, 0x7C	; 124
    1008:	fe 4f       	sbci	r31, 0xFE	; 254
    100a:	20 81       	ld	r18, Z
    100c:	31 81       	ldd	r19, Z+1	; 0x01
    100e:	42 81       	ldd	r20, Z+2	; 0x02
    1010:	53 81       	ldd	r21, Z+3	; 0x03
    1012:	cb 01       	movw	r24, r22
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	fc 01       	movw	r30, r24
    101e:	ec 57       	subi	r30, 0x7C	; 124
    1020:	fe 4f       	sbci	r31, 0xFE	; 254
    1022:	20 83       	st	Z, r18
    1024:	31 83       	std	Z+1, r19	; 0x01
    1026:	42 83       	std	Z+2, r20	; 0x02
    1028:	53 83       	std	Z+3, r21	; 0x03
		{
			/*apply multiplication in the same place of the first operand*/
			operands[i] *= operands[i+1];

			/*operators counter < operands counter by 1 so it is the required value for <<*/
			for(j = i; j < operators_counter; j++)
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	90 91 c9 01 	lds	r25, 0x01C9
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	89 17       	cp	r24, r25
    1038:	40 f2       	brcs	.-112    	; 0xfca <calculate+0x98>
				/*shift all operands after this stored value to the left*/
				operands[j+1] = operands[j+2];
			}

			/*decrement the operators counter since we used one and overwrote on it by shifting left*/
			operators_counter--;
    103a:	80 91 c9 01 	lds	r24, 0x01C9
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	80 93 c9 01 	sts	0x01C9, r24
    1044:	a4 c0       	rjmp	.+328    	; 0x118e <calculate+0x25c>
		}
		else if(operators[i] == '%')
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	fc 01       	movw	r30, r24
    104e:	e1 53       	subi	r30, 0x31	; 49
    1050:	fe 4f       	sbci	r31, 0xFE	; 254
    1052:	80 81       	ld	r24, Z
    1054:	85 32       	cpi	r24, 0x25	; 37
    1056:	09 f0       	breq	.+2      	; 0x105a <calculate+0x128>
    1058:	9a c0       	rjmp	.+308    	; 0x118e <calculate+0x25c>
		{
			if(operands[i+1] == 0)
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	fc 01       	movw	r30, r24
    106c:	ec 57       	subi	r30, 0x7C	; 124
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	a2 81       	ldd	r26, Z+2	; 0x02
    1076:	b3 81       	ldd	r27, Z+3	; 0x03
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	a1 05       	cpc	r26, r1
    107c:	b1 05       	cpc	r27, r1
    107e:	99 f4       	brne	.+38     	; 0x10a6 <calculate+0x174>
			{
				/*check for zero division*/
				result_flag = LOGIC_LOW;
    1080:	10 92 ce 01 	sts	0x01CE, r1
				displayResult(result);
    1084:	80 91 ca 01 	lds	r24, 0x01CA
    1088:	90 91 cb 01 	lds	r25, 0x01CB
    108c:	a0 91 cc 01 	lds	r26, 0x01CC
    1090:	b0 91 cd 01 	lds	r27, 0x01CD
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	0e 94 6f 09 	call	0x12de	; 0x12de <displayResult>
    10a4:	11 c1       	rjmp	.+546    	; 0x12c8 <calculate+0x396>
				return;
			}
			else
			{
				/*apply division in the same place of the first operand*/
				operands[i] /= operands[i+1];
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	c8 2e       	mov	r12, r24
    10aa:	dd 24       	eor	r13, r13
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	fc 01       	movw	r30, r24
    10bc:	ec 57       	subi	r30, 0x7C	; 124
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	e0 80       	ld	r14, Z
    10c2:	f1 80       	ldd	r15, Z+1	; 0x01
    10c4:	02 81       	ldd	r16, Z+2	; 0x02
    10c6:	13 81       	ldd	r17, Z+3	; 0x03
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	fc 01       	movw	r30, r24
    10da:	ec 57       	subi	r30, 0x7C	; 124
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	20 81       	ld	r18, Z
    10e0:	31 81       	ldd	r19, Z+1	; 0x01
    10e2:	42 81       	ldd	r20, Z+2	; 0x02
    10e4:	53 81       	ldd	r21, Z+3	; 0x03
    10e6:	c8 01       	movw	r24, r16
    10e8:	b7 01       	movw	r22, r14
    10ea:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodsi4>
    10ee:	da 01       	movw	r26, r20
    10f0:	c9 01       	movw	r24, r18
    10f2:	9c 01       	movw	r18, r24
    10f4:	ad 01       	movw	r20, r26
    10f6:	c6 01       	movw	r24, r12
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	fc 01       	movw	r30, r24
    1102:	ec 57       	subi	r30, 0x7C	; 124
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	20 83       	st	Z, r18
    1108:	31 83       	std	Z+1, r19	; 0x01
    110a:	42 83       	std	Z+2, r20	; 0x02
    110c:	53 83       	std	Z+3, r21	; 0x03
			}

			for(j = i; j < operators_counter; j++)
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	33 c0       	rjmp	.+102    	; 0x117a <calculate+0x248>
			{
				/*shift all operators after current used operator to left*/
				operators[j] = operators[j+1];
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	fc 01       	movw	r30, r24
    1124:	e1 53       	subi	r30, 0x31	; 49
    1126:	fe 4f       	sbci	r31, 0xFE	; 254
    1128:	80 81       	ld	r24, Z
    112a:	f9 01       	movw	r30, r18
    112c:	e1 53       	subi	r30, 0x31	; 49
    112e:	fe 4f       	sbci	r31, 0xFE	; 254
    1130:	80 83       	st	Z, r24
				/*shift all operands after this stored value to the left*/
				operands[j+1] = operands[j+2];
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	bc 01       	movw	r22, r24
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 96       	adiw	r24, 0x02	; 2
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	fc 01       	movw	r30, r24
    1150:	ec 57       	subi	r30, 0x7C	; 124
    1152:	fe 4f       	sbci	r31, 0xFE	; 254
    1154:	20 81       	ld	r18, Z
    1156:	31 81       	ldd	r19, Z+1	; 0x01
    1158:	42 81       	ldd	r20, Z+2	; 0x02
    115a:	53 81       	ldd	r21, Z+3	; 0x03
    115c:	cb 01       	movw	r24, r22
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	fc 01       	movw	r30, r24
    1168:	ec 57       	subi	r30, 0x7C	; 124
    116a:	fe 4f       	sbci	r31, 0xFE	; 254
    116c:	20 83       	st	Z, r18
    116e:	31 83       	std	Z+1, r19	; 0x01
    1170:	42 83       	std	Z+2, r20	; 0x02
    1172:	53 83       	std	Z+3, r21	; 0x03
			{
				/*apply division in the same place of the first operand*/
				operands[i] /= operands[i+1];
			}

			for(j = i; j < operators_counter; j++)
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	90 91 c9 01 	lds	r25, 0x01C9
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	89 17       	cp	r24, r25
    1182:	40 f2       	brcs	.-112    	; 0x1114 <calculate+0x1e2>
				/*shift all operands after this stored value to the left*/
				operands[j+1] = operands[j+2];
			}

			/*decrement the operators counter since we used one and overwrote on it by shifting left*/
			operators_counter--;
    1184:	80 91 c9 01 	lds	r24, 0x01C9
    1188:	81 50       	subi	r24, 0x01	; 1
    118a:	80 93 c9 01 	sts	0x01C9, r24
/*calculate the operands according to the precedence of the operators*/
void calculate(void)
{
	uint8 i,j;
	/*loop on operators array to apply 'x' & '%' first */
	for(i = 0 ; i < operators_counter ; i++)
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	8a 83       	std	Y+2, r24	; 0x02
    1194:	90 91 c9 01 	lds	r25, 0x01C9
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	89 17       	cp	r24, r25
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <calculate+0x26e>
    119e:	d6 ce       	rjmp	.-596    	; 0xf4c <calculate+0x1a>
			/*decrement the operators counter since we used one and overwrote on it by shifting left*/
			operators_counter--;
		}
	}
	/*assign the result to the first value in the operands array to be able to add and subtract from it the remaining values*/
	result = operands[0];
    11a0:	80 91 84 01 	lds	r24, 0x0184
    11a4:	90 91 85 01 	lds	r25, 0x0185
    11a8:	a0 91 86 01 	lds	r26, 0x0186
    11ac:	b0 91 87 01 	lds	r27, 0x0187
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	80 93 ca 01 	sts	0x01CA, r24
    11c0:	90 93 cb 01 	sts	0x01CB, r25
    11c4:	a0 93 cc 01 	sts	0x01CC, r26
    11c8:	b0 93 cd 01 	sts	0x01CD, r27

	/* completing the calculations of the result */
	for(i = 0 ; i < operators_counter; i++)
    11cc:	1a 82       	std	Y+2, r1	; 0x02
    11ce:	63 c0       	rjmp	.+198    	; 0x1296 <calculate+0x364>
	{
		/*loop on the remaining operators and add or subtract values to the result*/
		if(operators[i] == '+')
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	fc 01       	movw	r30, r24
    11d8:	e1 53       	subi	r30, 0x31	; 49
    11da:	fe 4f       	sbci	r31, 0xFE	; 254
    11dc:	80 81       	ld	r24, Z
    11de:	8b 32       	cpi	r24, 0x2B	; 43
    11e0:	61 f5       	brne	.+88     	; 0x123a <calculate+0x308>
			result += operands[i+1];
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	fc 01       	movw	r30, r24
    11f4:	ec 57       	subi	r30, 0x7C	; 124
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	a2 81       	ldd	r26, Z+2	; 0x02
    11fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	20 91 ca 01 	lds	r18, 0x01CA
    1210:	30 91 cb 01 	lds	r19, 0x01CB
    1214:	40 91 cc 01 	lds	r20, 0x01CC
    1218:	50 91 cd 01 	lds	r21, 0x01CD
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	80 93 ca 01 	sts	0x01CA, r24
    122c:	90 93 cb 01 	sts	0x01CB, r25
    1230:	a0 93 cc 01 	sts	0x01CC, r26
    1234:	b0 93 cd 01 	sts	0x01CD, r27
    1238:	2b c0       	rjmp	.+86     	; 0x1290 <calculate+0x35e>

		else
			result -= operands[i+1];
    123a:	e0 90 ca 01 	lds	r14, 0x01CA
    123e:	f0 90 cb 01 	lds	r15, 0x01CB
    1242:	00 91 cc 01 	lds	r16, 0x01CC
    1246:	10 91 cd 01 	lds	r17, 0x01CD
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	fc 01       	movw	r30, r24
    125c:	ec 57       	subi	r30, 0x7C	; 124
    125e:	fe 4f       	sbci	r31, 0xFE	; 254
    1260:	80 81       	ld	r24, Z
    1262:	91 81       	ldd	r25, Z+1	; 0x01
    1264:	a2 81       	ldd	r26, Z+2	; 0x02
    1266:	b3 81       	ldd	r27, Z+3	; 0x03
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1270:	9b 01       	movw	r18, r22
    1272:	ac 01       	movw	r20, r24
    1274:	c8 01       	movw	r24, r16
    1276:	b7 01       	movw	r22, r14
    1278:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	80 93 ca 01 	sts	0x01CA, r24
    1284:	90 93 cb 01 	sts	0x01CB, r25
    1288:	a0 93 cc 01 	sts	0x01CC, r26
    128c:	b0 93 cd 01 	sts	0x01CD, r27
	}
	/*assign the result to the first value in the operands array to be able to add and subtract from it the remaining values*/
	result = operands[0];

	/* completing the calculations of the result */
	for(i = 0 ; i < operators_counter; i++)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	8a 83       	std	Y+2, r24	; 0x02
    1296:	90 91 c9 01 	lds	r25, 0x01C9
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	89 17       	cp	r24, r25
    129e:	08 f4       	brcc	.+2      	; 0x12a2 <calculate+0x370>
    12a0:	97 cf       	rjmp	.-210    	; 0x11d0 <calculate+0x29e>
			result += operands[i+1];

		else
			result -= operands[i+1];
	}
	result_flag = LOGIC_HIGH;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 ce 01 	sts	0x01CE, r24
	displayResult(result); /*call the function to display the result*/
    12a8:	80 91 ca 01 	lds	r24, 0x01CA
    12ac:	90 91 cb 01 	lds	r25, 0x01CB
    12b0:	a0 91 cc 01 	lds	r26, 0x01CC
    12b4:	b0 91 cd 01 	lds	r27, 0x01CD
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	0e 94 6f 09 	call	0x12de	; 0x12de <displayResult>
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	df 90       	pop	r13
    12da:	cf 90       	pop	r12
    12dc:	08 95       	ret

000012de <displayResult>:


void displayResult(int result)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	6c 97       	sbiw	r28, 0x1c	; 28
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	9a 8b       	std	Y+18, r25	; 0x12
    12f4:	89 8b       	std	Y+17, r24	; 0x11
	/*strings to be printed on the LCD*/
	const sint8 string1[] = "Result = ";
    12f6:	ce 01       	movw	r24, r28
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	9c 8b       	std	Y+20, r25	; 0x14
    12fc:	8b 8b       	std	Y+19, r24	; 0x13
    12fe:	e0 e6       	ldi	r30, 0x60	; 96
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	fe 8b       	std	Y+22, r31	; 0x16
    1304:	ed 8b       	std	Y+21, r30	; 0x15
    1306:	fa e0       	ldi	r31, 0x0A	; 10
    1308:	ff 8b       	std	Y+23, r31	; 0x17
    130a:	ed 89       	ldd	r30, Y+21	; 0x15
    130c:	fe 89       	ldd	r31, Y+22	; 0x16
    130e:	00 80       	ld	r0, Z
    1310:	8d 89       	ldd	r24, Y+21	; 0x15
    1312:	9e 89       	ldd	r25, Y+22	; 0x16
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	9e 8b       	std	Y+22, r25	; 0x16
    1318:	8d 8b       	std	Y+21, r24	; 0x15
    131a:	eb 89       	ldd	r30, Y+19	; 0x13
    131c:	fc 89       	ldd	r31, Y+20	; 0x14
    131e:	00 82       	st	Z, r0
    1320:	8b 89       	ldd	r24, Y+19	; 0x13
    1322:	9c 89       	ldd	r25, Y+20	; 0x14
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	9c 8b       	std	Y+20, r25	; 0x14
    1328:	8b 8b       	std	Y+19, r24	; 0x13
    132a:	9f 89       	ldd	r25, Y+23	; 0x17
    132c:	91 50       	subi	r25, 0x01	; 1
    132e:	9f 8b       	std	Y+23, r25	; 0x17
    1330:	ef 89       	ldd	r30, Y+23	; 0x17
    1332:	ee 23       	and	r30, r30
    1334:	51 f7       	brne	.-44     	; 0x130a <displayResult+0x2c>
	const sint8 string2[] = "ERROR";
    1336:	ce 01       	movw	r24, r28
    1338:	0b 96       	adiw	r24, 0x0b	; 11
    133a:	99 8f       	std	Y+25, r25	; 0x19
    133c:	88 8f       	std	Y+24, r24	; 0x18
    133e:	ea e6       	ldi	r30, 0x6A	; 106
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	fb 8f       	std	Y+27, r31	; 0x1b
    1344:	ea 8f       	std	Y+26, r30	; 0x1a
    1346:	f6 e0       	ldi	r31, 0x06	; 6
    1348:	fc 8f       	std	Y+28, r31	; 0x1c
    134a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    134c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    134e:	00 80       	ld	r0, Z
    1350:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1352:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	9b 8f       	std	Y+27, r25	; 0x1b
    1358:	8a 8f       	std	Y+26, r24	; 0x1a
    135a:	e8 8d       	ldd	r30, Y+24	; 0x18
    135c:	f9 8d       	ldd	r31, Y+25	; 0x19
    135e:	00 82       	st	Z, r0
    1360:	88 8d       	ldd	r24, Y+24	; 0x18
    1362:	99 8d       	ldd	r25, Y+25	; 0x19
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	99 8f       	std	Y+25, r25	; 0x19
    1368:	88 8f       	std	Y+24, r24	; 0x18
    136a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136c:	91 50       	subi	r25, 0x01	; 1
    136e:	9c 8f       	std	Y+28, r25	; 0x1c
    1370:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1372:	ee 23       	and	r30, r30
    1374:	51 f7       	brne	.-44     	; 0x134a <displayResult+0x6c>

	/*check for error flag*/
	if(result_flag == LOGIC_HIGH)
    1376:	80 91 ce 01 	lds	r24, 0x01CE
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	69 f4       	brne	.+26     	; 0x1398 <displayResult+0xba>
	{
		/*display the calculated result*/
		LCD_displayStringRowColumn(1,0,string1);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	9e 01       	movw	r18, r28
    1384:	2f 5f       	subi	r18, 0xFF	; 255
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	a9 01       	movw	r20, r18
    138a:	0e 94 79 19 	call	0x32f2	; 0x32f2 <LCD_displayStringRowColumn>
		LCD_integerToString(result);
    138e:	89 89       	ldd	r24, Y+17	; 0x11
    1390:	9a 89       	ldd	r25, Y+18	; 0x12
    1392:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_integerToString>
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <displayResult+0xca>
	}
	else
	{
		/*display error message*/
		LCD_displayStringRowColumn(1,5,string2);
    1398:	9e 01       	movw	r18, r28
    139a:	25 5f       	subi	r18, 0xF5	; 245
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	65 e0       	ldi	r22, 0x05	; 5
    13a2:	a9 01       	movw	r20, r18
    13a4:	0e 94 79 19 	call	0x32f2	; 0x32f2 <LCD_displayStringRowColumn>
	}
}
    13a8:	6c 96       	adiw	r28, 0x1c	; 28
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <main>:

int main(void)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	6e 97       	sbiw	r28, 0x1e	; 30
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
	/*display hello message*/
	sint8 string[] = "Calculator";
    13ce:	ce 01       	movw	r24, r28
    13d0:	0f 96       	adiw	r24, 0x0f	; 15
    13d2:	9b 8f       	std	Y+27, r25	; 0x1b
    13d4:	8a 8f       	std	Y+26, r24	; 0x1a
    13d6:	e0 e7       	ldi	r30, 0x70	; 112
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	fd 8f       	std	Y+29, r31	; 0x1d
    13dc:	ec 8f       	std	Y+28, r30	; 0x1c
    13de:	fb e0       	ldi	r31, 0x0B	; 11
    13e0:	fe 8f       	std	Y+30, r31	; 0x1e
    13e2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    13e4:	fd 8d       	ldd	r31, Y+29	; 0x1d
    13e6:	00 80       	ld	r0, Z
    13e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	9d 8f       	std	Y+29, r25	; 0x1d
    13f0:	8c 8f       	std	Y+28, r24	; 0x1c
    13f2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    13f4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    13f6:	00 82       	st	Z, r0
    13f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	9b 8f       	std	Y+27, r25	; 0x1b
    1400:	8a 8f       	std	Y+26, r24	; 0x1a
    1402:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1404:	91 50       	subi	r25, 0x01	; 1
    1406:	9e 8f       	std	Y+30, r25	; 0x1e
    1408:	ee 8d       	ldd	r30, Y+30	; 0x1e
    140a:	ee 23       	and	r30, r30
    140c:	51 f7       	brne	.-44     	; 0x13e2 <main+0x28>
	LCD_init();
    140e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_init>

	LCD_displayStringRowColumn(0,3,string);
    1412:	9e 01       	movw	r18, r28
    1414:	21 5f       	subi	r18, 0xF1	; 241
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	63 e0       	ldi	r22, 0x03	; 3
    141c:	a9 01       	movw	r20, r18
    141e:	0e 94 79 19 	call	0x32f2	; 0x32f2 <LCD_displayStringRowColumn>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	aa e7       	ldi	r26, 0x7A	; 122
    1428:	b4 e4       	ldi	r27, 0x44	; 68
    142a:	8b 87       	std	Y+11, r24	; 0x0b
    142c:	9c 87       	std	Y+12, r25	; 0x0c
    142e:	ad 87       	std	Y+13, r26	; 0x0d
    1430:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	6b 85       	ldd	r22, Y+11	; 0x0b
    1434:	7c 85       	ldd	r23, Y+12	; 0x0c
    1436:	8d 85       	ldd	r24, Y+13	; 0x0d
    1438:	9e 85       	ldd	r25, Y+14	; 0x0e
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a e7       	ldi	r20, 0x7A	; 122
    1440:	55 e4       	ldi	r21, 0x45	; 69
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8f 83       	std	Y+7, r24	; 0x07
    144c:	98 87       	std	Y+8, r25	; 0x08
    144e:	a9 87       	std	Y+9, r26	; 0x09
    1450:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	78 85       	ldd	r23, Y+8	; 0x08
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	9a 85       	ldd	r25, Y+10	; 0x0a
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <main+0xba>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
    1472:	3f c0       	rjmp	.+126    	; 0x14f2 <main+0x138>
	else if (__tmp > 65535)
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	4c f5       	brge	.+82     	; 0x14de <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	6b 85       	ldd	r22, Y+11	; 0x0b
    148e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1490:	8d 85       	ldd	r24, Y+13	; 0x0d
    1492:	9e 85       	ldd	r25, Y+14	; 0x0e
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <main+0x11a>
    14b6:	80 e9       	ldi	r24, 0x90	; 144
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <main+0x108>
    14c6:	9c 83       	std	Y+4, r25	; 0x04
    14c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f7       	brne	.-38     	; 0x14b6 <main+0xfc>
    14dc:	14 c0       	rjmp	.+40     	; 0x1506 <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	6f 81       	ldd	r22, Y+7	; 0x07
    14e0:	78 85       	ldd	r23, Y+8	; 0x08
    14e2:	89 85       	ldd	r24, Y+9	; 0x09
    14e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <main+0x144>
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    1506:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_clearScreen>

	while(1)
	{
		calc_init();
    150a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <calc_init>
    150e:	fd cf       	rjmp	.-6      	; 0x150a <main+0x150>

00001510 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <GPIO_setupPinDirection+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <GPIO_setupPinDirection+0x8>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	6a 83       	std	Y+2, r22	; 0x02
    1522:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	88 30       	cpi	r24, 0x08	; 8
    1528:	08 f0       	brcs	.+2      	; 0x152c <GPIO_setupPinDirection+0x1c>
    152a:	d5 c0       	rjmp	.+426    	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	08 f0       	brcs	.+2      	; 0x1534 <GPIO_setupPinDirection+0x24>
    1532:	d1 c0       	rjmp	.+418    	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3d 83       	std	Y+5, r19	; 0x05
    153c:	2c 83       	std	Y+4, r18	; 0x04
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <GPIO_setupPinDirection+0x3a>
    1548:	43 c0       	rjmp	.+134    	; 0x15d0 <GPIO_setupPinDirection+0xc0>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	2c f4       	brge	.+10     	; 0x155e <GPIO_setupPinDirection+0x4e>
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	71 f0       	breq	.+28     	; 0x1578 <GPIO_setupPinDirection+0x68>
    155c:	bc c0       	rjmp	.+376    	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
    155e:	2c 81       	ldd	r18, Y+4	; 0x04
    1560:	3d 81       	ldd	r19, Y+5	; 0x05
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <GPIO_setupPinDirection+0x5a>
    1568:	5f c0       	rjmp	.+190    	; 0x1628 <GPIO_setupPinDirection+0x118>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <GPIO_setupPinDirection+0x66>
    1574:	85 c0       	rjmp	.+266    	; 0x1680 <GPIO_setupPinDirection+0x170>
    1576:	af c0       	rjmp	.+350    	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	a1 f4       	brne	.+40     	; 0x15a6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA.byte,pin_num);
    157e:	aa e3       	ldi	r26, 0x3A	; 58
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ea e3       	ldi	r30, 0x3A	; 58
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GPIO_setupPinDirection+0x8c>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <GPIO_setupPinDirection+0x88>
    15a0:	84 2b       	or	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	98 c0       	rjmp	.+304    	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA.byte,pin_num);
    15a6:	aa e3       	ldi	r26, 0x3A	; 58
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	ea e3       	ldi	r30, 0x3A	; 58
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <GPIO_setupPinDirection+0xb4>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <GPIO_setupPinDirection+0xb0>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	83 c0       	rjmp	.+262    	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	a1 f4       	brne	.+40     	; 0x15fe <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB.byte,pin_num);
    15d6:	a7 e3       	ldi	r26, 0x37	; 55
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e7 e3       	ldi	r30, 0x37	; 55
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <GPIO_setupPinDirection+0xe4>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <GPIO_setupPinDirection+0xe0>
    15f8:	84 2b       	or	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	6c c0       	rjmp	.+216    	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB.byte,pin_num);
    15fe:	a7 e3       	ldi	r26, 0x37	; 55
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e7 e3       	ldi	r30, 0x37	; 55
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_setupPinDirection+0x10c>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_setupPinDirection+0x108>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	57 c0       	rjmp	.+174    	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	a1 f4       	brne	.+40     	; 0x1656 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC.byte,pin_num);
    162e:	a4 e3       	ldi	r26, 0x34	; 52
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e4 e3       	ldi	r30, 0x34	; 52
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <GPIO_setupPinDirection+0x13c>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <GPIO_setupPinDirection+0x138>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	40 c0       	rjmp	.+128    	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC.byte,pin_num);
    1656:	a4 e3       	ldi	r26, 0x34	; 52
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e4 e3       	ldi	r30, 0x34	; 52
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GPIO_setupPinDirection+0x164>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GPIO_setupPinDirection+0x160>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	2b c0       	rjmp	.+86     	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	a1 f4       	brne	.+40     	; 0x16ae <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD.byte,pin_num);
    1686:	a1 e3       	ldi	r26, 0x31	; 49
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e1 e3       	ldi	r30, 0x31	; 49
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_setupPinDirection+0x194>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_setupPinDirection+0x190>
    16a8:	84 2b       	or	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD.byte,pin_num);
    16ae:	a1 e3       	ldi	r26, 0x31	; 49
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e1 e3       	ldi	r30, 0x31	; 49
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_setupPinDirection+0x1bc>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_setupPinDirection+0x1b8>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_writePin+0x6>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_writePin+0x8>
    16ee:	0f 92       	push	r0
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	6a 83       	std	Y+2, r22	; 0x02
    16f8:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <GPIO_writePin+0x1c>
    1700:	d5 c0       	rjmp	.+426    	; 0x18ac <GPIO_writePin+0x1c6>
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	88 30       	cpi	r24, 0x08	; 8
    1706:	08 f0       	brcs	.+2      	; 0x170a <GPIO_writePin+0x24>
    1708:	d1 c0       	rjmp	.+418    	; 0x18ac <GPIO_writePin+0x1c6>
	{

	}
	else
	{
		switch(port_num)
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	3d 83       	std	Y+5, r19	; 0x05
    1712:	2c 83       	std	Y+4, r18	; 0x04
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
    171c:	09 f4       	brne	.+2      	; 0x1720 <GPIO_writePin+0x3a>
    171e:	43 c0       	rjmp	.+134    	; 0x17a6 <GPIO_writePin+0xc0>
    1720:	2c 81       	ldd	r18, Y+4	; 0x04
    1722:	3d 81       	ldd	r19, Y+5	; 0x05
    1724:	22 30       	cpi	r18, 0x02	; 2
    1726:	31 05       	cpc	r19, r1
    1728:	2c f4       	brge	.+10     	; 0x1734 <GPIO_writePin+0x4e>
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	71 f0       	breq	.+28     	; 0x174e <GPIO_writePin+0x68>
    1732:	bc c0       	rjmp	.+376    	; 0x18ac <GPIO_writePin+0x1c6>
    1734:	2c 81       	ldd	r18, Y+4	; 0x04
    1736:	3d 81       	ldd	r19, Y+5	; 0x05
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <GPIO_writePin+0x5a>
    173e:	5f c0       	rjmp	.+190    	; 0x17fe <GPIO_writePin+0x118>
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	9d 81       	ldd	r25, Y+5	; 0x05
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	91 05       	cpc	r25, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <GPIO_writePin+0x66>
    174a:	85 c0       	rjmp	.+266    	; 0x1856 <GPIO_writePin+0x170>
    174c:	af c0       	rjmp	.+350    	; 0x18ac <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
			{
				if(value == LOGIC_HIGH)
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	a1 f4       	brne	.+40     	; 0x177c <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA.byte, pin_num);
    1754:	ab e3       	ldi	r26, 0x3B	; 59
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	eb e3       	ldi	r30, 0x3B	; 59
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <GPIO_writePin+0x8c>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <GPIO_writePin+0x88>
    1776:	84 2b       	or	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	98 c0       	rjmp	.+304    	; 0x18ac <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA.byte, pin_num);
    177c:	ab e3       	ldi	r26, 0x3B	; 59
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	eb e3       	ldi	r30, 0x3B	; 59
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <GPIO_writePin+0xb4>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <GPIO_writePin+0xb0>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	83 c0       	rjmp	.+262    	; 0x18ac <GPIO_writePin+0x1c6>
				}
				break;
			}
			case PORTB_ID:
			{
				if(value == LOGIC_HIGH)
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	a1 f4       	brne	.+40     	; 0x17d4 <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB.byte, pin_num);
    17ac:	a8 e3       	ldi	r26, 0x38	; 56
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e8 e3       	ldi	r30, 0x38	; 56
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <GPIO_writePin+0xe4>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <GPIO_writePin+0xe0>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	6c c0       	rjmp	.+216    	; 0x18ac <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB.byte, pin_num);
    17d4:	a8 e3       	ldi	r26, 0x38	; 56
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e8 e3       	ldi	r30, 0x38	; 56
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_writePin+0x10c>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_writePin+0x108>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	57 c0       	rjmp	.+174    	; 0x18ac <GPIO_writePin+0x1c6>
				}
				break;
			}
			case PORTC_ID:
			{
				if(value == LOGIC_HIGH)
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	a1 f4       	brne	.+40     	; 0x182c <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC.byte, pin_num);
    1804:	a5 e3       	ldi	r26, 0x35	; 53
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e5 e3       	ldi	r30, 0x35	; 53
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <GPIO_writePin+0x13c>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <GPIO_writePin+0x138>
    1826:	84 2b       	or	r24, r20
    1828:	8c 93       	st	X, r24
    182a:	40 c0       	rjmp	.+128    	; 0x18ac <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC.byte, pin_num);
    182c:	a5 e3       	ldi	r26, 0x35	; 53
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e5 e3       	ldi	r30, 0x35	; 53
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <GPIO_writePin+0x164>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <GPIO_writePin+0x160>
    184e:	80 95       	com	r24
    1850:	84 23       	and	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	2b c0       	rjmp	.+86     	; 0x18ac <GPIO_writePin+0x1c6>
				}
				break;
			}
			case PORTD_ID:
			{
				if(value == LOGIC_HIGH)
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	a1 f4       	brne	.+40     	; 0x1884 <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD.byte, pin_num);
    185c:	a2 e3       	ldi	r26, 0x32	; 50
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e2 e3       	ldi	r30, 0x32	; 50
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 2e       	mov	r0, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <GPIO_writePin+0x194>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <GPIO_writePin+0x190>
    187e:	84 2b       	or	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD.byte, pin_num);
    1884:	a2 e3       	ldi	r26, 0x32	; 50
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e2 e3       	ldi	r30, 0x32	; 50
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <GPIO_writePin+0x1bc>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <GPIO_writePin+0x1b8>
    18a6:	80 95       	com	r24
    18a8:	84 23       	and	r24, r20
    18aa:	8c 93       	st	X, r24
				break;
			}
		}
	}

}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <GPIO_readPin+0x6>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <GPIO_readPin+0x8>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	8a 83       	std	Y+2, r24	; 0x02
    18cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = 0;
    18ce:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	18 f4       	brcc	.+6      	; 0x18dc <GPIO_readPin+0x20>
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	88 30       	cpi	r24, 0x08	; 8
    18da:	10 f0       	brcs	.+4      	; 0x18e0 <GPIO_readPin+0x24>
	{
		pinValue = LOGIC_LOW;
    18dc:	19 82       	std	Y+1, r1	; 0x01
    18de:	99 c0       	rjmp	.+306    	; 0x1a12 <GPIO_readPin+0x156>
	}
	else
	{
		switch(port_num)
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	3d 83       	std	Y+5, r19	; 0x05
    18e8:	2c 83       	std	Y+4, r18	; 0x04
    18ea:	4c 81       	ldd	r20, Y+4	; 0x04
    18ec:	5d 81       	ldd	r21, Y+5	; 0x05
    18ee:	41 30       	cpi	r20, 0x01	; 1
    18f0:	51 05       	cpc	r21, r1
    18f2:	b1 f1       	breq	.+108    	; 0x1960 <GPIO_readPin+0xa4>
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	82 30       	cpi	r24, 0x02	; 2
    18fa:	91 05       	cpc	r25, r1
    18fc:	34 f4       	brge	.+12     	; 0x190a <GPIO_readPin+0x4e>
    18fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1900:	3d 81       	ldd	r19, Y+5	; 0x05
    1902:	21 15       	cp	r18, r1
    1904:	31 05       	cpc	r19, r1
    1906:	71 f0       	breq	.+28     	; 0x1924 <GPIO_readPin+0x68>
    1908:	84 c0       	rjmp	.+264    	; 0x1a12 <GPIO_readPin+0x156>
    190a:	4c 81       	ldd	r20, Y+4	; 0x04
    190c:	5d 81       	ldd	r21, Y+5	; 0x05
    190e:	42 30       	cpi	r20, 0x02	; 2
    1910:	51 05       	cpc	r21, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <GPIO_readPin+0x5a>
    1914:	43 c0       	rjmp	.+134    	; 0x199c <GPIO_readPin+0xe0>
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	9d 81       	ldd	r25, Y+5	; 0x05
    191a:	83 30       	cpi	r24, 0x03	; 3
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <GPIO_readPin+0x66>
    1920:	5b c0       	rjmp	.+182    	; 0x19d8 <GPIO_readPin+0x11c>
    1922:	77 c0       	rjmp	.+238    	; 0x1a12 <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			{
				pinValue = GET_BIT(PINA.byte,pin_num);
    1924:	e9 e3       	ldi	r30, 0x39	; 57
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 c0       	rjmp	.+4      	; 0x193e <GPIO_readPin+0x82>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	2a 95       	dec	r18
    1940:	e2 f7       	brpl	.-8      	; 0x193a <GPIO_readPin+0x7e>
    1942:	9a 01       	movw	r18, r20
    1944:	28 23       	and	r18, r24
    1946:	39 23       	and	r19, r25
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_readPin+0x9a>
    1952:	55 95       	asr	r21
    1954:	47 95       	ror	r20
    1956:	8a 95       	dec	r24
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_readPin+0x96>
    195a:	ca 01       	movw	r24, r20
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	59 c0       	rjmp	.+178    	; 0x1a12 <GPIO_readPin+0x156>
				break;
			}

		case PORTB_ID:
			{
				pinValue = GET_BIT(PINB.byte,pin_num);
    1960:	e6 e3       	ldi	r30, 0x36	; 54
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 c0       	rjmp	.+4      	; 0x197a <GPIO_readPin+0xbe>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	2a 95       	dec	r18
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <GPIO_readPin+0xba>
    197e:	9a 01       	movw	r18, r20
    1980:	28 23       	and	r18, r24
    1982:	39 23       	and	r19, r25
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a9 01       	movw	r20, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <GPIO_readPin+0xd6>
    198e:	55 95       	asr	r21
    1990:	47 95       	ror	r20
    1992:	8a 95       	dec	r24
    1994:	e2 f7       	brpl	.-8      	; 0x198e <GPIO_readPin+0xd2>
    1996:	ca 01       	movw	r24, r20
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	3b c0       	rjmp	.+118    	; 0x1a12 <GPIO_readPin+0x156>
				break;
			}

		case PORTC_ID:
			{
				pinValue = GET_BIT(PINC.byte,pin_num);
    199c:	e3 e3       	ldi	r30, 0x33	; 51
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <GPIO_readPin+0xfa>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	2a 95       	dec	r18
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <GPIO_readPin+0xf6>
    19ba:	9a 01       	movw	r18, r20
    19bc:	28 23       	and	r18, r24
    19be:	39 23       	and	r19, r25
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_readPin+0x112>
    19ca:	55 95       	asr	r21
    19cc:	47 95       	ror	r20
    19ce:	8a 95       	dec	r24
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_readPin+0x10e>
    19d2:	ca 01       	movw	r24, r20
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	1d c0       	rjmp	.+58     	; 0x1a12 <GPIO_readPin+0x156>
				break;
			}
		case PORTD_ID:
			{
				pinValue = GET_BIT(PIND.byte,pin_num);
    19d8:	e0 e3       	ldi	r30, 0x30	; 48
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <GPIO_readPin+0x136>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	2a 95       	dec	r18
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <GPIO_readPin+0x132>
    19f6:	9a 01       	movw	r18, r20
    19f8:	28 23       	and	r18, r24
    19fa:	39 23       	and	r19, r25
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a9 01       	movw	r20, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <GPIO_readPin+0x14e>
    1a06:	55 95       	asr	r21
    1a08:	47 95       	ror	r20
    1a0a:	8a 95       	dec	r24
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <GPIO_readPin+0x14a>
    1a0e:	ca 01       	movw	r24, r20
    1a10:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
	}
	return pinValue;
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <GPIO_setupPortDirection+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <GPIO_setupPortDirection+0x8>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	84 30       	cpi	r24, 0x04	; 4
    1a38:	90 f5       	brcc	.+100    	; 0x1a9e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	3c 83       	std	Y+4, r19	; 0x04
    1a42:	2b 83       	std	Y+3, r18	; 0x03
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	d1 f0       	breq	.+52     	; 0x1a82 <GPIO_setupPortDirection+0x5e>
    1a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a50:	3c 81       	ldd	r19, Y+4	; 0x04
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <GPIO_setupPortDirection+0x3e>
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	61 f0       	breq	.+24     	; 0x1a78 <GPIO_setupPortDirection+0x54>
    1a60:	1e c0       	rjmp	.+60     	; 0x1a9e <GPIO_setupPortDirection+0x7a>
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	3c 81       	ldd	r19, Y+4	; 0x04
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	81 f0       	breq	.+32     	; 0x1a8c <GPIO_setupPortDirection+0x68>
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	81 f0       	breq	.+32     	; 0x1a96 <GPIO_setupPortDirection+0x72>
    1a76:	13 c0       	rjmp	.+38     	; 0x1a9e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA.byte = direction;
    1a78:	ea e3       	ldi	r30, 0x3A	; 58
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	80 83       	st	Z, r24
    1a80:	0e c0       	rjmp	.+28     	; 0x1a9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB.byte = direction;
    1a82:	e7 e3       	ldi	r30, 0x37	; 55
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	80 83       	st	Z, r24
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC.byte = direction;
    1a8c:	e4 e3       	ldi	r30, 0x34	; 52
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	80 83       	st	Z, r24
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD.byte = direction;
    1a96:	e1 e3       	ldi	r30, 0x31	; 49
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <GPIO_writePort+0x6>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <GPIO_writePort+0x8>
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	90 f5       	brcc	.+100    	; 0x1b26 <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	3c 83       	std	Y+4, r19	; 0x04
    1aca:	2b 83       	std	Y+3, r18	; 0x03
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	d1 f0       	breq	.+52     	; 0x1b0a <GPIO_writePort+0x5e>
    1ad6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	2c f4       	brge	.+10     	; 0x1aea <GPIO_writePort+0x3e>
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <GPIO_writePort+0x54>
    1ae8:	1e c0       	rjmp	.+60     	; 0x1b26 <GPIO_writePort+0x7a>
    1aea:	2b 81       	ldd	r18, Y+3	; 0x03
    1aec:	3c 81       	ldd	r19, Y+4	; 0x04
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	81 f0       	breq	.+32     	; 0x1b14 <GPIO_writePort+0x68>
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	91 05       	cpc	r25, r1
    1afc:	81 f0       	breq	.+32     	; 0x1b1e <GPIO_writePort+0x72>
    1afe:	13 c0       	rjmp	.+38     	; 0x1b26 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA.byte = value;
    1b00:	eb e3       	ldi	r30, 0x3B	; 59
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	80 83       	st	Z, r24
    1b08:	0e c0       	rjmp	.+28     	; 0x1b26 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB.byte = value;
    1b0a:	e8 e3       	ldi	r30, 0x38	; 56
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	80 83       	st	Z, r24
    1b12:	09 c0       	rjmp	.+18     	; 0x1b26 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC.byte = value;
    1b14:	e5 e3       	ldi	r30, 0x35	; 53
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	80 83       	st	Z, r24
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD.byte = value;
    1b1e:	e2 e3       	ldi	r30, 0x32	; 50
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	80 83       	st	Z, r24
			break;
		}

	}

}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <GPIO_readPort+0x6>
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <GPIO_readPort+0x8>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PIN_regValue = LOGIC_LOW;
    1b42:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	84 30       	cpi	r24, 0x04	; 4
    1b48:	90 f5       	brcc	.+100    	; 0x1bae <GPIO_readPort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	3c 83       	std	Y+4, r19	; 0x04
    1b52:	2b 83       	std	Y+3, r18	; 0x03
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	d1 f0       	breq	.+52     	; 0x1b92 <GPIO_readPort+0x5e>
    1b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b60:	3c 81       	ldd	r19, Y+4	; 0x04
    1b62:	22 30       	cpi	r18, 0x02	; 2
    1b64:	31 05       	cpc	r19, r1
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <GPIO_readPort+0x3e>
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	61 f0       	breq	.+24     	; 0x1b88 <GPIO_readPort+0x54>
    1b70:	1e c0       	rjmp	.+60     	; 0x1bae <GPIO_readPort+0x7a>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	81 f0       	breq	.+32     	; 0x1b9c <GPIO_readPort+0x68>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	91 05       	cpc	r25, r1
    1b84:	81 f0       	breq	.+32     	; 0x1ba6 <GPIO_readPort+0x72>
    1b86:	13 c0       	rjmp	.+38     	; 0x1bae <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			{
				PIN_regValue = PINA.byte;
    1b88:	e9 e3       	ldi	r30, 0x39	; 57
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	0e c0       	rjmp	.+28     	; 0x1bae <GPIO_readPort+0x7a>
				break;
			}
		case PORTB_ID:
			{
				PIN_regValue = PINB.byte;
    1b92:	e6 e3       	ldi	r30, 0x36	; 54
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	09 c0       	rjmp	.+18     	; 0x1bae <GPIO_readPort+0x7a>
				break;
			}
		case PORTC_ID:
			{
				PIN_regValue = PINC.byte;
    1b9c:	e3 e3       	ldi	r30, 0x33	; 51
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <GPIO_readPort+0x7a>
				break;
			}
		case PORTD_ID:
			{
				PIN_regValue = PIND.byte;
    1ba6:	e0 e3       	ldi	r30, 0x30	; 48
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
	}
	return PIN_regValue;
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <KEYPAD_getPressedKey>:


/*Functions Definitions*/

uint8 KEYPAD_getPressedKey(void)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	60 97       	sbiw	r28, 0x10	; 16
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;

	/*Setting the Keypad row buttons pins as input*/
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	64 e0       	ldi	r22, 0x04	; 4
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	65 e0       	ldi	r22, 0x05	; 5
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	66 e0       	ldi	r22, 0x06	; 6
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	67 e0       	ldi	r22, 0x07	; 7
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>

	/*Setting the Keypad column buttons pins as input*/
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    1bfa:	83 e0       	ldi	r24, 0x03	; 3
    1bfc:	62 e0       	ldi	r22, 0x02	; 2
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	63 e0       	ldi	r22, 0x03	; 3
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    1c0e:	83 e0       	ldi	r24, 0x03	; 3
    1c10:	64 e0       	ldi	r22, 0x04	; 4
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>

	/*will not need to configure the pins of the last column if keypad is 4x3*/
#if(KEYPAD_COLS_NUM == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	65 e0       	ldi	r22, 0x05	; 5
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row = 0; row < KEYPAD_ROWS_NUM; row++)
    1c22:	1f 86       	std	Y+15, r1	; 0x0f
    1c24:	b4 c0       	rjmp	.+360    	; 0x1d8e <KEYPAD_getPressedKey+0x1d0>
		{
			/*On every loop all row ports should be input except one*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c28:	98 2f       	mov	r25, r24
    1c2a:	9c 5f       	subi	r25, 0xFC	; 252
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	69 2f       	mov	r22, r25
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>

			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);
    1c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c38:	98 2f       	mov	r25, r24
    1c3a:	9c 5f       	subi	r25, 0xFC	; 252
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	69 2f       	mov	r22, r25
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>

			/*Loop on columns to know which column the switch is pressed on*/
			for(col = 0; col < KEYPAD_COLS_NUM; col++)
    1c46:	18 8a       	std	Y+16, r1	; 0x10
    1c48:	22 c0       	rjmp	.+68     	; 0x1c8e <KEYPAD_getPressedKey+0xd0>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1c4a:	88 89       	ldd	r24, Y+16	; 0x10
    1c4c:	98 2f       	mov	r25, r24
    1c4e:	9e 5f       	subi	r25, 0xFE	; 254
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	69 2f       	mov	r22, r25
    1c54:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <GPIO_readPin>
    1c58:	88 23       	and	r24, r24
    1c5a:	b1 f4       	brne	.+44     	; 0x1c88 <KEYPAD_getPressedKey+0xca>
						return ((row * KEYPAD_COLS_NUM)+col+1);
					#else
						#if (KEYPAD_COLS_NUM == 3)
							return (KEYPAD_4x3_adjustKeyNumber((row * KEYPAD_COLS_NUM)+col+1));
						#elif (KEYPAD_COLS_NUM == 4)
							return (KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_COLS_NUM)+col+1));
    1c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	88 89       	ldd	r24, Y+16	; 0x10
    1c6e:	89 0f       	add	r24, r25
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    1c76:	60 96       	adiw	r28, 0x10	; 16
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);

			/*Loop on columns to know which column the switch is pressed on*/
			for(col = 0; col < KEYPAD_COLS_NUM; col++)
    1c88:	88 89       	ldd	r24, Y+16	; 0x10
    1c8a:	8f 5f       	subi	r24, 0xFF	; 255
    1c8c:	88 8b       	std	Y+16, r24	; 0x10
    1c8e:	88 89       	ldd	r24, Y+16	; 0x10
    1c90:	84 30       	cpi	r24, 0x04	; 4
    1c92:	d8 f2       	brcs	.-74     	; 0x1c4a <KEYPAD_getPressedKey+0x8c>
							return (KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_COLS_NUM)+col+1));
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c96:	98 2f       	mov	r25, r24
    1c98:	9c 5f       	subi	r25, 0xFC	; 252
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	69 2f       	mov	r22, r25
    1c9e:	40 e0       	ldi	r20, 0x00	; 0
    1ca0:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a0 ea       	ldi	r26, 0xA0	; 160
    1caa:	b0 e4       	ldi	r27, 0x40	; 64
    1cac:	8b 87       	std	Y+11, r24	; 0x0b
    1cae:	9c 87       	std	Y+12, r25	; 0x0c
    1cb0:	ad 87       	std	Y+13, r26	; 0x0d
    1cb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	4a e7       	ldi	r20, 0x7A	; 122
    1cc2:	55 e4       	ldi	r21, 0x45	; 69
    1cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	8f 83       	std	Y+7, r24	; 0x07
    1cce:	98 87       	std	Y+8, r25	; 0x08
    1cd0:	a9 87       	std	Y+9, r26	; 0x09
    1cd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e8       	ldi	r20, 0x80	; 128
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	3f c0       	rjmp	.+126    	; 0x1d74 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	3f ef       	ldi	r19, 0xFF	; 255
    1d02:	4f e7       	ldi	r20, 0x7F	; 127
    1d04:	57 e4       	ldi	r21, 0x47	; 71
    1d06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d0a:	18 16       	cp	r1, r24
    1d0c:	4c f5       	brge	.+82     	; 0x1d60 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e2       	ldi	r20, 0x20	; 32
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	0f c0       	rjmp	.+30     	; 0x1d56 <KEYPAD_getPressedKey+0x198>
    1d38:	80 e9       	ldi	r24, 0x90	; 144
    1d3a:	91 e0       	ldi	r25, 0x01	; 1
    1d3c:	9c 83       	std	Y+4, r25	; 0x04
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <KEYPAD_getPressedKey+0x186>
    1d48:	9c 83       	std	Y+4, r25	; 0x04
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	9e 83       	std	Y+6, r25	; 0x06
    1d54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <KEYPAD_getPressedKey+0x17a>
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	9a 83       	std	Y+2, r25	; 0x02
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <KEYPAD_getPressedKey+0x1c2>
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
#endif

	while(1)
	{
		for(row = 0; row < KEYPAD_ROWS_NUM; row++)
    1d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
    1d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	08 f4       	brcc	.+2      	; 0x1d96 <KEYPAD_getPressedKey+0x1d8>
    1d94:	48 cf       	rjmp	.-368    	; 0x1c26 <KEYPAD_getPressedKey+0x68>
    1d96:	45 cf       	rjmp	.-374    	; 0x1c22 <KEYPAD_getPressedKey+0x64>

00001d98 <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_COLS_NUM == 4)
/*Update the keypad pressed button value with the correct 4x3 shape*/
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypadButton = 0;
    1da6:	19 82       	std	Y+1, r1	; 0x01
		switch(button_number)
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	3c 83       	std	Y+4, r19	; 0x04
    1db0:	2b 83       	std	Y+3, r18	; 0x03
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	88 30       	cpi	r24, 0x08	; 8
    1db8:	91 05       	cpc	r25, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <KEYPAD_4x4_adjustKeyNumber+0x26>
    1dbc:	70 c0       	rjmp	.+224    	; 0x1e9e <KEYPAD_4x4_adjustKeyNumber+0x106>
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	29 30       	cpi	r18, 0x09	; 9
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	5c f5       	brge	.+86     	; 0x1e1e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	84 30       	cpi	r24, 0x04	; 4
    1dce:	91 05       	cpc	r25, r1
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1dd2:	59 c0       	rjmp	.+178    	; 0x1e86 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1dd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd8:	25 30       	cpi	r18, 0x05	; 5
    1dda:	31 05       	cpc	r19, r1
    1ddc:	9c f4       	brge	.+38     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	91 05       	cpc	r25, r1
    1de6:	09 f4       	brne	.+2      	; 0x1dea <KEYPAD_4x4_adjustKeyNumber+0x52>
    1de8:	48 c0       	rjmp	.+144    	; 0x1e7a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1dea:	2b 81       	ldd	r18, Y+3	; 0x03
    1dec:	3c 81       	ldd	r19, Y+4	; 0x04
    1dee:	23 30       	cpi	r18, 0x03	; 3
    1df0:	31 05       	cpc	r19, r1
    1df2:	0c f0       	brlt	.+2      	; 0x1df6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1df4:	45 c0       	rjmp	.+138    	; 0x1e80 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e00:	39 c0       	rjmp	.+114    	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e02:	67 c0       	rjmp	.+206    	; 0x1ed2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e04:	2b 81       	ldd	r18, Y+3	; 0x03
    1e06:	3c 81       	ldd	r19, Y+4	; 0x04
    1e08:	26 30       	cpi	r18, 0x06	; 6
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e0e:	41 c0       	rjmp	.+130    	; 0x1e92 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	87 30       	cpi	r24, 0x07	; 7
    1e16:	91 05       	cpc	r25, r1
    1e18:	0c f0       	brlt	.+2      	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e1a:	3e c0       	rjmp	.+124    	; 0x1e98 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e1c:	37 c0       	rjmp	.+110    	; 0x1e8c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e20:	3c 81       	ldd	r19, Y+4	; 0x04
    1e22:	2c 30       	cpi	r18, 0x0C	; 12
    1e24:	31 05       	cpc	r19, r1
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e28:	46 c0       	rjmp	.+140    	; 0x1eb6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	8d 30       	cpi	r24, 0x0D	; 13
    1e30:	91 05       	cpc	r25, r1
    1e32:	5c f4       	brge	.+22     	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e34:	2b 81       	ldd	r18, Y+3	; 0x03
    1e36:	3c 81       	ldd	r19, Y+4	; 0x04
    1e38:	2a 30       	cpi	r18, 0x0A	; 10
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	b1 f1       	breq	.+108    	; 0x1eaa <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	8b 30       	cpi	r24, 0x0B	; 11
    1e44:	91 05       	cpc	r25, r1
    1e46:	a4 f5       	brge	.+104    	; 0x1eb0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e48:	2d c0       	rjmp	.+90     	; 0x1ea4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4e:	2e 30       	cpi	r18, 0x0E	; 14
    1e50:	31 05       	cpc	r19, r1
    1e52:	b9 f1       	breq	.+110    	; 0x1ec2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	8e 30       	cpi	r24, 0x0E	; 14
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	7c f1       	brlt	.+94     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e60:	3c 81       	ldd	r19, Y+4	; 0x04
    1e62:	2f 30       	cpi	r18, 0x0F	; 15
    1e64:	31 05       	cpc	r19, r1
    1e66:	79 f1       	breq	.+94     	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	80 31       	cpi	r24, 0x10	; 16
    1e6e:	91 05       	cpc	r25, r1
    1e70:	69 f1       	breq	.+90     	; 0x1ecc <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e72:	2f c0       	rjmp	.+94     	; 0x1ed2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
		{
			case 1:
				keypadButton = 7;
    1e74:	87 e0       	ldi	r24, 0x07	; 7
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	2e c0       	rjmp	.+92     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 2:
				keypadButton = 8;
    1e7a:	88 e0       	ldi	r24, 0x08	; 8
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	2b c0       	rjmp	.+86     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 3:
				keypadButton = 9;
    1e80:	89 e0       	ldi	r24, 0x09	; 9
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	28 c0       	rjmp	.+80     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 4:
				keypadButton = '%';
    1e86:	85 e2       	ldi	r24, 0x25	; 37
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	25 c0       	rjmp	.+74     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 5:
				keypadButton = 4;
    1e8c:	84 e0       	ldi	r24, 0x04	; 4
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	22 c0       	rjmp	.+68     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 6:
				keypadButton = 5;
    1e92:	85 e0       	ldi	r24, 0x05	; 5
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	1f c0       	rjmp	.+62     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 7:
				keypadButton = 6;
    1e98:	86 e0       	ldi	r24, 0x06	; 6
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	1c c0       	rjmp	.+56     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 8:
				keypadButton = 'x';
    1e9e:	88 e7       	ldi	r24, 0x78	; 120
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	19 c0       	rjmp	.+50     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 9:
				keypadButton = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	16 c0       	rjmp	.+44     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 10:
				keypadButton = 2;
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	13 c0       	rjmp	.+38     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 11:
				keypadButton = 3;
    1eb0:	83 e0       	ldi	r24, 0x03	; 3
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	10 c0       	rjmp	.+32     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 12:
				keypadButton = '-';
    1eb6:	8d e2       	ldi	r24, 0x2D	; 45
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	0d c0       	rjmp	.+26     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 13:
				keypadButton = 'c';
    1ebc:	83 e6       	ldi	r24, 0x63	; 99
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	0a c0       	rjmp	.+20     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 14:
				keypadButton = 0;
    1ec2:	19 82       	std	Y+1, r1	; 0x01
    1ec4:	08 c0       	rjmp	.+16     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 15:
				keypadButton = '=';
    1ec6:	8d e3       	ldi	r24, 0x3D	; 61
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	05 c0       	rjmp	.+10     	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 16:
				keypadButton = '+';
    1ecc:	8b e2       	ldi	r24, 0x2B	; 43
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			default:
				keypadButton = button_number;
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return keypadButton;
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <LCD_init>:
#include <util/delay.h>


/*Initialization of LCD with the required mode and configuration*/
void LCD_init(void)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	2e 97       	sbiw	r28, 0x0e	; 14
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
	/*Configure the direction of RS and E pins as o/p pins*/
	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS_PIN,PIN_OUTPUT);
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT,LCD_ENABLE_PIN,PIN_OUTPUT);
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	62 e0       	ldi	r22, 0x02	; 2
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 ea       	ldi	r26, 0xA0	; 160
    1f14:	b1 e4       	ldi	r27, 0x41	; 65
    1f16:	8b 87       	std	Y+11, r24	; 0x0b
    1f18:	9c 87       	std	Y+12, r25	; 0x0c
    1f1a:	ad 87       	std	Y+13, r26	; 0x0d
    1f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a e7       	ldi	r20, 0x7A	; 122
    1f2c:	55 e4       	ldi	r21, 0x45	; 69
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8f 83       	std	Y+7, r24	; 0x07
    1f38:	98 87       	std	Y+8, r25	; 0x08
    1f3a:	a9 87       	std	Y+9, r26	; 0x09
    1f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <LCD_init+0x7a>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	3f c0       	rjmp	.+126    	; 0x1fde <LCD_init+0xf8>
	else if (__tmp > 65535)
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	4c f5       	brge	.+82     	; 0x1fca <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <LCD_init+0xda>
    1fa2:	80 e9       	ldi	r24, 0x90	; 144
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_init+0xc8>
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <LCD_init+0xbc>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_init+0x104>
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
	/*LCD power ON delay is always 15 ms*/
	_delay_ms(20);

#if(LCD_DATA_BITS_MODE == 4)
	/*Configure the 4 pins on the data port as o/p*/
	GPIO_setupPinDirection(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN4,PIN_OUTPUT);
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	63 e0       	ldi	r22, 0x03	; 3
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN5,PIN_OUTPUT);
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	64 e0       	ldi	r22, 0x04	; 4
    2000:	41 e0       	ldi	r20, 0x01	; 1
    2002:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN6,PIN_OUTPUT);
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	65 e0       	ldi	r22, 0x05	; 5
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN7,PIN_OUTPUT);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	66 e0       	ldi	r22, 0x06	; 6
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_setupPinDirection>

	/*Send initialization commands for 4 bit mode*/
	LCD_sendCommand(LCD_MODE_2LINES_4BITS_INIT1);
    201a:	83 e3       	ldi	r24, 0x33	; 51
    201c:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
	LCD_sendCommand(LCD_MODE_2LINES_4BITS_INIT2);
    2020:	82 e3       	ldi	r24, 0x32	; 50
    2022:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>

	/*choose the mode of operation of LCD*/
	LCD_sendCommand(LCD_MODE_2LINES_4BITS);
    2026:	88 e2       	ldi	r24, 0x28	; 40
    2028:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
	LCD_sendCommand(LCD_MODE_2LINES_8BITS);

#endif

	/*Send initialization display commands*/
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    202c:	8c e0       	ldi	r24, 0x0C	; 12
    202e:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
}
    2038:	2e 96       	adiw	r28, 0x0e	; 14
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <LCD_sendCommand>:


/*Send the required command to the LCD*/
void LCD_sendCommand(uint8 command)
{
    204a:	0f 93       	push	r16
    204c:	1f 93       	push	r17
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	c3 56       	subi	r28, 0x63	; 99
    2058:	d0 40       	sbci	r29, 0x00	; 0
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	fe 01       	movw	r30, r28
    2066:	ed 59       	subi	r30, 0x9D	; 157
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 83       	st	Z, r24
	/*RS = 0 for sending command*/
	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOGIC_LOW);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    2076:	fe 01       	movw	r30, r28
    2078:	e1 5a       	subi	r30, 0xA1	; 161
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 e8       	ldi	r26, 0x80	; 128
    2082:	bf e3       	ldi	r27, 0x3F	; 63
    2084:	80 83       	st	Z, r24
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	a2 83       	std	Z+2, r26	; 0x02
    208a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	8e 01       	movw	r16, r28
    208e:	05 5a       	subi	r16, 0xA5	; 165
    2090:	1f 4f       	sbci	r17, 0xFF	; 255
    2092:	fe 01       	movw	r30, r28
    2094:	e1 5a       	subi	r30, 0xA1	; 161
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	55 e4       	ldi	r21, 0x45	; 69
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	f8 01       	movw	r30, r16
    20b2:	80 83       	st	Z, r24
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	a2 83       	std	Z+2, r26	; 0x02
    20b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ba:	fe 01       	movw	r30, r28
    20bc:	e5 5a       	subi	r30, 0xA5	; 165
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	44 f4       	brge	.+16     	; 0x20e8 <LCD_sendCommand+0x9e>
		__ticks = 1;
    20d8:	fe 01       	movw	r30, r28
    20da:	e7 5a       	subi	r30, 0xA7	; 167
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	80 83       	st	Z, r24
    20e6:	64 c0       	rjmp	.+200    	; 0x21b0 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    20e8:	fe 01       	movw	r30, r28
    20ea:	e5 5a       	subi	r30, 0xA5	; 165
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	60 81       	ld	r22, Z
    20f0:	71 81       	ldd	r23, Z+1	; 0x01
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	0c f0       	brlt	.+2      	; 0x2108 <LCD_sendCommand+0xbe>
    2106:	43 c0       	rjmp	.+134    	; 0x218e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2108:	fe 01       	movw	r30, r28
    210a:	e1 5a       	subi	r30, 0xA1	; 161
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	60 81       	ld	r22, Z
    2110:	71 81       	ldd	r23, Z+1	; 0x01
    2112:	82 81       	ldd	r24, Z+2	; 0x02
    2114:	93 81       	ldd	r25, Z+3	; 0x03
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8e 01       	movw	r16, r28
    2128:	07 5a       	subi	r16, 0xA7	; 167
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	f8 01       	movw	r30, r16
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	80 83       	st	Z, r24
    213e:	1f c0       	rjmp	.+62     	; 0x217e <LCD_sendCommand+0x134>
    2140:	fe 01       	movw	r30, r28
    2142:	e9 5a       	subi	r30, 0xA9	; 169
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 e9       	ldi	r24, 0x90	; 144
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
    214e:	fe 01       	movw	r30, r28
    2150:	e9 5a       	subi	r30, 0xA9	; 169
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	91 81       	ldd	r25, Z+1	; 0x01
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_sendCommand+0x10e>
    215c:	fe 01       	movw	r30, r28
    215e:	e9 5a       	subi	r30, 0xA9	; 169
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	de 01       	movw	r26, r28
    2168:	a7 5a       	subi	r26, 0xA7	; 167
    216a:	bf 4f       	sbci	r27, 0xFF	; 255
    216c:	fe 01       	movw	r30, r28
    216e:	e7 5a       	subi	r30, 0xA7	; 167
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	11 96       	adiw	r26, 0x01	; 1
    217a:	9c 93       	st	X, r25
    217c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	fe 01       	movw	r30, r28
    2180:	e7 5a       	subi	r30, 0xA7	; 167
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	d1 f6       	brne	.-76     	; 0x2140 <LCD_sendCommand+0xf6>
    218c:	27 c0       	rjmp	.+78     	; 0x21dc <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218e:	8e 01       	movw	r16, r28
    2190:	07 5a       	subi	r16, 0xA7	; 167
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	fe 01       	movw	r30, r28
    2196:	e5 5a       	subi	r30, 0xA5	; 165
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	f8 01       	movw	r30, r16
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	80 83       	st	Z, r24
    21b0:	de 01       	movw	r26, r28
    21b2:	ab 5a       	subi	r26, 0xAB	; 171
    21b4:	bf 4f       	sbci	r27, 0xFF	; 255
    21b6:	fe 01       	movw	r30, r28
    21b8:	e7 5a       	subi	r30, 0xA7	; 167
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	8d 93       	st	X+, r24
    21c2:	9c 93       	st	X, r25
    21c4:	fe 01       	movw	r30, r28
    21c6:	eb 5a       	subi	r30, 0xAB	; 171
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	80 81       	ld	r24, Z
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_sendCommand+0x184>
    21d2:	fe 01       	movw	r30, r28
    21d4:	eb 5a       	subi	r30, 0xAB	; 171
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	80 83       	st	Z, r24
	_delay_ms(1); /*Delay for processing Tas = 50ns*/
	/*Enable LCD E = 1*/
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_HIGH);
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	62 e0       	ldi	r22, 0x02	; 2
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    21e6:	fe 01       	movw	r30, r28
    21e8:	ef 5a       	subi	r30, 0xAF	; 175
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e8       	ldi	r26, 0x80	; 128
    21f2:	bf e3       	ldi	r27, 0x3F	; 63
    21f4:	80 83       	st	Z, r24
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	a2 83       	std	Z+2, r26	; 0x02
    21fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	8e 01       	movw	r16, r28
    21fe:	03 5b       	subi	r16, 0xB3	; 179
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	fe 01       	movw	r30, r28
    2204:	ef 5a       	subi	r30, 0xAF	; 175
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a e7       	ldi	r20, 0x7A	; 122
    2216:	55 e4       	ldi	r21, 0x45	; 69
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	f8 01       	movw	r30, r16
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    222a:	fe 01       	movw	r30, r28
    222c:	e3 5b       	subi	r30, 0xB3	; 179
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	60 81       	ld	r22, Z
    2232:	71 81       	ldd	r23, Z+1	; 0x01
    2234:	82 81       	ldd	r24, Z+2	; 0x02
    2236:	93 81       	ldd	r25, Z+3	; 0x03
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	44 f4       	brge	.+16     	; 0x2258 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2248:	fe 01       	movw	r30, r28
    224a:	e5 5b       	subi	r30, 0xB5	; 181
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
    2256:	64 c0       	rjmp	.+200    	; 0x2320 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2258:	fe 01       	movw	r30, r28
    225a:	e3 5b       	subi	r30, 0xB3	; 179
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	0c f0       	brlt	.+2      	; 0x2278 <LCD_sendCommand+0x22e>
    2276:	43 c0       	rjmp	.+134    	; 0x22fe <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	fe 01       	movw	r30, r28
    227a:	ef 5a       	subi	r30, 0xAF	; 175
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8e 01       	movw	r16, r28
    2298:	05 5b       	subi	r16, 0xB5	; 181
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	1f c0       	rjmp	.+62     	; 0x22ee <LCD_sendCommand+0x2a4>
    22b0:	fe 01       	movw	r30, r28
    22b2:	e7 5b       	subi	r30, 0xB7	; 183
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 e9       	ldi	r24, 0x90	; 144
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
    22be:	fe 01       	movw	r30, r28
    22c0:	e7 5b       	subi	r30, 0xB7	; 183
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_sendCommand+0x27e>
    22cc:	fe 01       	movw	r30, r28
    22ce:	e7 5b       	subi	r30, 0xB7	; 183
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	de 01       	movw	r26, r28
    22d8:	a5 5b       	subi	r26, 0xB5	; 181
    22da:	bf 4f       	sbci	r27, 0xFF	; 255
    22dc:	fe 01       	movw	r30, r28
    22de:	e5 5b       	subi	r30, 0xB5	; 181
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	9c 93       	st	X, r25
    22ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	fe 01       	movw	r30, r28
    22f0:	e5 5b       	subi	r30, 0xB5	; 181
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	d1 f6       	brne	.-76     	; 0x22b0 <LCD_sendCommand+0x266>
    22fc:	27 c0       	rjmp	.+78     	; 0x234c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	8e 01       	movw	r16, r28
    2300:	05 5b       	subi	r16, 0xB5	; 181
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	e3 5b       	subi	r30, 0xB3	; 179
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 81       	ld	r22, Z
    230c:	71 81       	ldd	r23, Z+1	; 0x01
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	de 01       	movw	r26, r28
    2322:	a9 5b       	subi	r26, 0xB9	; 185
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	e5 5b       	subi	r30, 0xB5	; 181
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	8d 93       	st	X+, r24
    2332:	9c 93       	st	X, r25
    2334:	fe 01       	movw	r30, r28
    2336:	e9 5b       	subi	r30, 0xB9	; 185
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	91 81       	ldd	r25, Z+1	; 0x01
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <LCD_sendCommand+0x2f4>
    2342:	fe 01       	movw	r30, r28
    2344:	e9 5b       	subi	r30, 0xB9	; 185
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
	_delay_ms(1); /*Delay for processing Tpw - Tdws = 190ns*/

#if(LCD_DATA_BITS_MODE == 4)
	/*send the required 8 bits command on two times through the same 4 pins*/
	GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN4,GET_BIT(command,4));
    234c:	fe 01       	movw	r30, r28
    234e:	ed 59       	subi	r30, 0x9D	; 157
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 81       	ld	r24, Z
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	80 71       	andi	r24, 0x10	; 16
    235a:	90 70       	andi	r25, 0x00	; 0
    235c:	95 95       	asr	r25
    235e:	87 95       	ror	r24
    2360:	95 95       	asr	r25
    2362:	87 95       	ror	r24
    2364:	95 95       	asr	r25
    2366:	87 95       	ror	r24
    2368:	95 95       	asr	r25
    236a:	87 95       	ror	r24
    236c:	98 2f       	mov	r25, r24
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	63 e0       	ldi	r22, 0x03	; 3
    2372:	49 2f       	mov	r20, r25
    2374:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN5,GET_BIT(command,5));
    2378:	fe 01       	movw	r30, r28
    237a:	ed 59       	subi	r30, 0x9D	; 157
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	80 72       	andi	r24, 0x20	; 32
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	95 95       	asr	r25
    238a:	87 95       	ror	r24
    238c:	95 95       	asr	r25
    238e:	87 95       	ror	r24
    2390:	95 95       	asr	r25
    2392:	87 95       	ror	r24
    2394:	95 95       	asr	r25
    2396:	87 95       	ror	r24
    2398:	95 95       	asr	r25
    239a:	87 95       	ror	r24
    239c:	98 2f       	mov	r25, r24
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	64 e0       	ldi	r22, 0x04	; 4
    23a2:	49 2f       	mov	r20, r25
    23a4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN6,GET_BIT(command,6));
    23a8:	fe 01       	movw	r30, r28
    23aa:	ed 59       	subi	r30, 0x9D	; 157
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	80 74       	andi	r24, 0x40	; 64
    23b6:	90 70       	andi	r25, 0x00	; 0
    23b8:	08 2e       	mov	r0, r24
    23ba:	89 2f       	mov	r24, r25
    23bc:	00 0c       	add	r0, r0
    23be:	88 1f       	adc	r24, r24
    23c0:	99 0b       	sbc	r25, r25
    23c2:	00 0c       	add	r0, r0
    23c4:	88 1f       	adc	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	98 2f       	mov	r25, r24
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	65 e0       	ldi	r22, 0x05	; 5
    23ce:	49 2f       	mov	r20, r25
    23d0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN7,GET_BIT(command,7));
    23d4:	fe 01       	movw	r30, r28
    23d6:	ed 59       	subi	r30, 0x9D	; 157
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	98 2f       	mov	r25, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	99 27       	eor	r25, r25
    23e2:	99 1f       	adc	r25, r25
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	66 e0       	ldi	r22, 0x06	; 6
    23e8:	49 2f       	mov	r20, r25
    23ea:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    23ee:	fe 01       	movw	r30, r28
    23f0:	ed 5b       	subi	r30, 0xBD	; 189
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 e8       	ldi	r26, 0x80	; 128
    23fa:	bf e3       	ldi	r27, 0x3F	; 63
    23fc:	80 83       	st	Z, r24
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	a2 83       	std	Z+2, r26	; 0x02
    2402:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	8e 01       	movw	r16, r28
    2406:	01 5c       	subi	r16, 0xC1	; 193
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	ed 5b       	subi	r30, 0xBD	; 189
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a e7       	ldi	r20, 0x7A	; 122
    241e:	55 e4       	ldi	r21, 0x45	; 69
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	f8 01       	movw	r30, r16
    242a:	80 83       	st	Z, r24
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	a2 83       	std	Z+2, r26	; 0x02
    2430:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2432:	fe 01       	movw	r30, r28
    2434:	ff 96       	adiw	r30, 0x3f	; 63
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	82 81       	ldd	r24, Z+2	; 0x02
    243c:	93 81       	ldd	r25, Z+3	; 0x03
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <LCD_sendCommand+0x40e>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9e af       	std	Y+62, r25	; 0x3e
    2454:	8d af       	std	Y+61, r24	; 0x3d
    2456:	46 c0       	rjmp	.+140    	; 0x24e4 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2458:	fe 01       	movw	r30, r28
    245a:	ff 96       	adiw	r30, 0x3f	; 63
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	64 f5       	brge	.+88     	; 0x24cc <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	fe 01       	movw	r30, r28
    2476:	ed 5b       	subi	r30, 0xBD	; 189
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e2       	ldi	r20, 0x20	; 32
    2488:	51 e4       	ldi	r21, 0x41	; 65
    248a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9e af       	std	Y+62, r25	; 0x3e
    24a0:	8d af       	std	Y+61, r24	; 0x3d
    24a2:	0f c0       	rjmp	.+30     	; 0x24c2 <LCD_sendCommand+0x478>
    24a4:	80 e9       	ldi	r24, 0x90	; 144
    24a6:	91 e0       	ldi	r25, 0x01	; 1
    24a8:	9c af       	std	Y+60, r25	; 0x3c
    24aa:	8b af       	std	Y+59, r24	; 0x3b
    24ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    24ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <LCD_sendCommand+0x466>
    24b4:	9c af       	std	Y+60, r25	; 0x3c
    24b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	9e af       	std	Y+62, r25	; 0x3e
    24c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    24c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	69 f7       	brne	.-38     	; 0x24a4 <LCD_sendCommand+0x45a>
    24ca:	16 c0       	rjmp	.+44     	; 0x24f8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24cc:	fe 01       	movw	r30, r28
    24ce:	ff 96       	adiw	r30, 0x3f	; 63
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e af       	std	Y+62, r25	; 0x3e
    24e2:	8d af       	std	Y+61, r24	; 0x3d
    24e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24e8:	9a af       	std	Y+58, r25	; 0x3a
    24ea:	89 af       	std	Y+57, r24	; 0x39
    24ec:	89 ad       	ldd	r24, Y+57	; 0x39
    24ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_sendCommand+0x4a6>
    24f4:	9a af       	std	Y+58, r25	; 0x3a
    24f6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /*Delay for processing Tdsw = 100ns*/
	/*Disable LCD E = 0*/
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_LOW);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	62 e0       	ldi	r22, 0x02	; 2
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a0 e8       	ldi	r26, 0x80	; 128
    2508:	bf e3       	ldi	r27, 0x3F	; 63
    250a:	8d ab       	std	Y+53, r24	; 0x35
    250c:	9e ab       	std	Y+54, r25	; 0x36
    250e:	af ab       	std	Y+55, r26	; 0x37
    2510:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	6d a9       	ldd	r22, Y+53	; 0x35
    2514:	7e a9       	ldd	r23, Y+54	; 0x36
    2516:	8f a9       	ldd	r24, Y+55	; 0x37
    2518:	98 ad       	ldd	r25, Y+56	; 0x38
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4a e7       	ldi	r20, 0x7A	; 122
    2520:	55 e4       	ldi	r21, 0x45	; 69
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	89 ab       	std	Y+49, r24	; 0x31
    252c:	9a ab       	std	Y+50, r25	; 0x32
    252e:	ab ab       	std	Y+51, r26	; 0x33
    2530:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2532:	69 a9       	ldd	r22, Y+49	; 0x31
    2534:	7a a9       	ldd	r23, Y+50	; 0x32
    2536:	8b a9       	ldd	r24, Y+51	; 0x33
    2538:	9c a9       	ldd	r25, Y+52	; 0x34
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2546:	88 23       	and	r24, r24
    2548:	2c f4       	brge	.+10     	; 0x2554 <LCD_sendCommand+0x50a>
		__ticks = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	98 ab       	std	Y+48, r25	; 0x30
    2550:	8f a7       	std	Y+47, r24	; 0x2f
    2552:	3f c0       	rjmp	.+126    	; 0x25d2 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2554:	69 a9       	ldd	r22, Y+49	; 0x31
    2556:	7a a9       	ldd	r23, Y+50	; 0x32
    2558:	8b a9       	ldd	r24, Y+51	; 0x33
    255a:	9c a9       	ldd	r25, Y+52	; 0x34
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	3f ef       	ldi	r19, 0xFF	; 255
    2560:	4f e7       	ldi	r20, 0x7F	; 127
    2562:	57 e4       	ldi	r21, 0x47	; 71
    2564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2568:	18 16       	cp	r1, r24
    256a:	4c f5       	brge	.+82     	; 0x25be <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256c:	6d a9       	ldd	r22, Y+53	; 0x35
    256e:	7e a9       	ldd	r23, Y+54	; 0x36
    2570:	8f a9       	ldd	r24, Y+55	; 0x37
    2572:	98 ad       	ldd	r25, Y+56	; 0x38
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e2       	ldi	r20, 0x20	; 32
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	98 ab       	std	Y+48, r25	; 0x30
    2592:	8f a7       	std	Y+47, r24	; 0x2f
    2594:	0f c0       	rjmp	.+30     	; 0x25b4 <LCD_sendCommand+0x56a>
    2596:	80 e9       	ldi	r24, 0x90	; 144
    2598:	91 e0       	ldi	r25, 0x01	; 1
    259a:	9e a7       	std	Y+46, r25	; 0x2e
    259c:	8d a7       	std	Y+45, r24	; 0x2d
    259e:	8d a5       	ldd	r24, Y+45	; 0x2d
    25a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <LCD_sendCommand+0x558>
    25a6:	9e a7       	std	Y+46, r25	; 0x2e
    25a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ac:	98 a9       	ldd	r25, Y+48	; 0x30
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	98 ab       	std	Y+48, r25	; 0x30
    25b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b6:	98 a9       	ldd	r25, Y+48	; 0x30
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	69 f7       	brne	.-38     	; 0x2596 <LCD_sendCommand+0x54c>
    25bc:	14 c0       	rjmp	.+40     	; 0x25e6 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25be:	69 a9       	ldd	r22, Y+49	; 0x31
    25c0:	7a a9       	ldd	r23, Y+50	; 0x32
    25c2:	8b a9       	ldd	r24, Y+51	; 0x33
    25c4:	9c a9       	ldd	r25, Y+52	; 0x34
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	98 ab       	std	Y+48, r25	; 0x30
    25d0:	8f a7       	std	Y+47, r24	; 0x2f
    25d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d4:	98 a9       	ldd	r25, Y+48	; 0x30
    25d6:	9c a7       	std	Y+44, r25	; 0x2c
    25d8:	8b a7       	std	Y+43, r24	; 0x2b
    25da:	8b a5       	ldd	r24, Y+43	; 0x2b
    25dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <LCD_sendCommand+0x594>
    25e2:	9c a7       	std	Y+44, r25	; 0x2c
    25e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/*Delay for processing Th = 13ns*/

	/*Enable LCD E = 1*/
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_HIGH);
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	62 e0       	ldi	r22, 0x02	; 2
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e8       	ldi	r26, 0x80	; 128
    25f6:	bf e3       	ldi	r27, 0x3F	; 63
    25f8:	8f a3       	std	Y+39, r24	; 0x27
    25fa:	98 a7       	std	Y+40, r25	; 0x28
    25fc:	a9 a7       	std	Y+41, r26	; 0x29
    25fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2600:	6f a1       	ldd	r22, Y+39	; 0x27
    2602:	78 a5       	ldd	r23, Y+40	; 0x28
    2604:	89 a5       	ldd	r24, Y+41	; 0x29
    2606:	9a a5       	ldd	r25, Y+42	; 0x2a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	4a e7       	ldi	r20, 0x7A	; 122
    260e:	55 e4       	ldi	r21, 0x45	; 69
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8b a3       	std	Y+35, r24	; 0x23
    261a:	9c a3       	std	Y+36, r25	; 0x24
    261c:	ad a3       	std	Y+37, r26	; 0x25
    261e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2620:	6b a1       	ldd	r22, Y+35	; 0x23
    2622:	7c a1       	ldd	r23, Y+36	; 0x24
    2624:	8d a1       	ldd	r24, Y+37	; 0x25
    2626:	9e a1       	ldd	r25, Y+38	; 0x26
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	2c f4       	brge	.+10     	; 0x2642 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9a a3       	std	Y+34, r25	; 0x22
    263e:	89 a3       	std	Y+33, r24	; 0x21
    2640:	3f c0       	rjmp	.+126    	; 0x26c0 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2642:	6b a1       	ldd	r22, Y+35	; 0x23
    2644:	7c a1       	ldd	r23, Y+36	; 0x24
    2646:	8d a1       	ldd	r24, Y+37	; 0x25
    2648:	9e a1       	ldd	r25, Y+38	; 0x26
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	3f ef       	ldi	r19, 0xFF	; 255
    264e:	4f e7       	ldi	r20, 0x7F	; 127
    2650:	57 e4       	ldi	r21, 0x47	; 71
    2652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2656:	18 16       	cp	r1, r24
    2658:	4c f5       	brge	.+82     	; 0x26ac <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265a:	6f a1       	ldd	r22, Y+39	; 0x27
    265c:	78 a5       	ldd	r23, Y+40	; 0x28
    265e:	89 a5       	ldd	r24, Y+41	; 0x29
    2660:	9a a5       	ldd	r25, Y+42	; 0x2a
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9a a3       	std	Y+34, r25	; 0x22
    2680:	89 a3       	std	Y+33, r24	; 0x21
    2682:	0f c0       	rjmp	.+30     	; 0x26a2 <LCD_sendCommand+0x658>
    2684:	80 e9       	ldi	r24, 0x90	; 144
    2686:	91 e0       	ldi	r25, 0x01	; 1
    2688:	98 a3       	std	Y+32, r25	; 0x20
    268a:	8f 8f       	std	Y+31, r24	; 0x1f
    268c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    268e:	98 a1       	ldd	r25, Y+32	; 0x20
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_sendCommand+0x646>
    2694:	98 a3       	std	Y+32, r25	; 0x20
    2696:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	89 a1       	ldd	r24, Y+33	; 0x21
    269a:	9a a1       	ldd	r25, Y+34	; 0x22
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	9a a3       	std	Y+34, r25	; 0x22
    26a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a2:	89 a1       	ldd	r24, Y+33	; 0x21
    26a4:	9a a1       	ldd	r25, Y+34	; 0x22
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	69 f7       	brne	.-38     	; 0x2684 <LCD_sendCommand+0x63a>
    26aa:	14 c0       	rjmp	.+40     	; 0x26d4 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ac:	6b a1       	ldd	r22, Y+35	; 0x23
    26ae:	7c a1       	ldd	r23, Y+36	; 0x24
    26b0:	8d a1       	ldd	r24, Y+37	; 0x25
    26b2:	9e a1       	ldd	r25, Y+38	; 0x26
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9a a3       	std	Y+34, r25	; 0x22
    26be:	89 a3       	std	Y+33, r24	; 0x21
    26c0:	89 a1       	ldd	r24, Y+33	; 0x21
    26c2:	9a a1       	ldd	r25, Y+34	; 0x22
    26c4:	9e 8f       	std	Y+30, r25	; 0x1e
    26c6:	8d 8f       	std	Y+29, r24	; 0x1d
    26c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <LCD_sendCommand+0x682>
    26d0:	9e 8f       	std	Y+30, r25	; 0x1e
    26d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /*Delay for processing Tpw - Tdws = 190ns*/

	GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN4,GET_BIT(command,0));
    26d4:	fe 01       	movw	r30, r28
    26d6:	ed 59       	subi	r30, 0x9D	; 157
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	80 81       	ld	r24, Z
    26dc:	98 2f       	mov	r25, r24
    26de:	91 70       	andi	r25, 0x01	; 1
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	63 e0       	ldi	r22, 0x03	; 3
    26e4:	49 2f       	mov	r20, r25
    26e6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN5,GET_BIT(command,1));
    26ea:	fe 01       	movw	r30, r28
    26ec:	ed 59       	subi	r30, 0x9D	; 157
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	82 70       	andi	r24, 0x02	; 2
    26f8:	90 70       	andi	r25, 0x00	; 0
    26fa:	95 95       	asr	r25
    26fc:	87 95       	ror	r24
    26fe:	98 2f       	mov	r25, r24
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	64 e0       	ldi	r22, 0x04	; 4
    2704:	49 2f       	mov	r20, r25
    2706:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN6,GET_BIT(command,2));
    270a:	fe 01       	movw	r30, r28
    270c:	ed 59       	subi	r30, 0x9D	; 157
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	88 2f       	mov	r24, r24
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	84 70       	andi	r24, 0x04	; 4
    2718:	90 70       	andi	r25, 0x00	; 0
    271a:	95 95       	asr	r25
    271c:	87 95       	ror	r24
    271e:	95 95       	asr	r25
    2720:	87 95       	ror	r24
    2722:	98 2f       	mov	r25, r24
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	65 e0       	ldi	r22, 0x05	; 5
    2728:	49 2f       	mov	r20, r25
    272a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN7,GET_BIT(command,3));
    272e:	fe 01       	movw	r30, r28
    2730:	ed 59       	subi	r30, 0x9D	; 157
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	88 2f       	mov	r24, r24
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	88 70       	andi	r24, 0x08	; 8
    273c:	90 70       	andi	r25, 0x00	; 0
    273e:	95 95       	asr	r25
    2740:	87 95       	ror	r24
    2742:	95 95       	asr	r25
    2744:	87 95       	ror	r24
    2746:	95 95       	asr	r25
    2748:	87 95       	ror	r24
    274a:	98 2f       	mov	r25, r24
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	66 e0       	ldi	r22, 0x06	; 6
    2750:	49 2f       	mov	r20, r25
    2752:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	a0 e8       	ldi	r26, 0x80	; 128
    275c:	bf e3       	ldi	r27, 0x3F	; 63
    275e:	89 8f       	std	Y+25, r24	; 0x19
    2760:	9a 8f       	std	Y+26, r25	; 0x1a
    2762:	ab 8f       	std	Y+27, r26	; 0x1b
    2764:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2766:	69 8d       	ldd	r22, Y+25	; 0x19
    2768:	7a 8d       	ldd	r23, Y+26	; 0x1a
    276a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    276c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4a e7       	ldi	r20, 0x7A	; 122
    2774:	55 e4       	ldi	r21, 0x45	; 69
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	8d 8b       	std	Y+21, r24	; 0x15
    2780:	9e 8b       	std	Y+22, r25	; 0x16
    2782:	af 8b       	std	Y+23, r26	; 0x17
    2784:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2786:	6d 89       	ldd	r22, Y+21	; 0x15
    2788:	7e 89       	ldd	r23, Y+22	; 0x16
    278a:	8f 89       	ldd	r24, Y+23	; 0x17
    278c:	98 8d       	ldd	r25, Y+24	; 0x18
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    279a:	88 23       	and	r24, r24
    279c:	2c f4       	brge	.+10     	; 0x27a8 <LCD_sendCommand+0x75e>
		__ticks = 1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9c 8b       	std	Y+20, r25	; 0x14
    27a4:	8b 8b       	std	Y+19, r24	; 0x13
    27a6:	3f c0       	rjmp	.+126    	; 0x2826 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    27a8:	6d 89       	ldd	r22, Y+21	; 0x15
    27aa:	7e 89       	ldd	r23, Y+22	; 0x16
    27ac:	8f 89       	ldd	r24, Y+23	; 0x17
    27ae:	98 8d       	ldd	r25, Y+24	; 0x18
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	3f ef       	ldi	r19, 0xFF	; 255
    27b4:	4f e7       	ldi	r20, 0x7F	; 127
    27b6:	57 e4       	ldi	r21, 0x47	; 71
    27b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27bc:	18 16       	cp	r1, r24
    27be:	4c f5       	brge	.+82     	; 0x2812 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c0:	69 8d       	ldd	r22, Y+25	; 0x19
    27c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e2       	ldi	r20, 0x20	; 32
    27ce:	51 e4       	ldi	r21, 0x41	; 65
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9c 8b       	std	Y+20, r25	; 0x14
    27e6:	8b 8b       	std	Y+19, r24	; 0x13
    27e8:	0f c0       	rjmp	.+30     	; 0x2808 <LCD_sendCommand+0x7be>
    27ea:	80 e9       	ldi	r24, 0x90	; 144
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	9a 8b       	std	Y+18, r25	; 0x12
    27f0:	89 8b       	std	Y+17, r24	; 0x11
    27f2:	89 89       	ldd	r24, Y+17	; 0x11
    27f4:	9a 89       	ldd	r25, Y+18	; 0x12
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_sendCommand+0x7ac>
    27fa:	9a 8b       	std	Y+18, r25	; 0x12
    27fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2800:	9c 89       	ldd	r25, Y+20	; 0x14
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	9c 8b       	std	Y+20, r25	; 0x14
    2806:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2808:	8b 89       	ldd	r24, Y+19	; 0x13
    280a:	9c 89       	ldd	r25, Y+20	; 0x14
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	69 f7       	brne	.-38     	; 0x27ea <LCD_sendCommand+0x7a0>
    2810:	14 c0       	rjmp	.+40     	; 0x283a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2812:	6d 89       	ldd	r22, Y+21	; 0x15
    2814:	7e 89       	ldd	r23, Y+22	; 0x16
    2816:	8f 89       	ldd	r24, Y+23	; 0x17
    2818:	98 8d       	ldd	r25, Y+24	; 0x18
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9c 8b       	std	Y+20, r25	; 0x14
    2824:	8b 8b       	std	Y+19, r24	; 0x13
    2826:	8b 89       	ldd	r24, Y+19	; 0x13
    2828:	9c 89       	ldd	r25, Y+20	; 0x14
    282a:	98 8b       	std	Y+16, r25	; 0x10
    282c:	8f 87       	std	Y+15, r24	; 0x0f
    282e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2830:	98 89       	ldd	r25, Y+16	; 0x10
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <LCD_sendCommand+0x7e8>
    2836:	98 8b       	std	Y+16, r25	; 0x10
    2838:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /*Delay for processing Tdsw = 100ns*/
	/*Disable LCD E = 0*/
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_LOW);
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	62 e0       	ldi	r22, 0x02	; 2
    283e:	40 e0       	ldi	r20, 0x00	; 0
    2840:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	a0 e8       	ldi	r26, 0x80	; 128
    284a:	bf e3       	ldi	r27, 0x3F	; 63
    284c:	8b 87       	std	Y+11, r24	; 0x0b
    284e:	9c 87       	std	Y+12, r25	; 0x0c
    2850:	ad 87       	std	Y+13, r26	; 0x0d
    2852:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2854:	6b 85       	ldd	r22, Y+11	; 0x0b
    2856:	7c 85       	ldd	r23, Y+12	; 0x0c
    2858:	8d 85       	ldd	r24, Y+13	; 0x0d
    285a:	9e 85       	ldd	r25, Y+14	; 0x0e
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a e7       	ldi	r20, 0x7A	; 122
    2862:	55 e4       	ldi	r21, 0x45	; 69
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	8f 83       	std	Y+7, r24	; 0x07
    286e:	98 87       	std	Y+8, r25	; 0x08
    2870:	a9 87       	std	Y+9, r26	; 0x09
    2872:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e8       	ldi	r20, 0x80	; 128
    2882:	5f e3       	ldi	r21, 0x3F	; 63
    2884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2888:	88 23       	and	r24, r24
    288a:	2c f4       	brge	.+10     	; 0x2896 <LCD_sendCommand+0x84c>
		__ticks = 1;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
    2894:	3f c0       	rjmp	.+126    	; 0x2914 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2896:	6f 81       	ldd	r22, Y+7	; 0x07
    2898:	78 85       	ldd	r23, Y+8	; 0x08
    289a:	89 85       	ldd	r24, Y+9	; 0x09
    289c:	9a 85       	ldd	r25, Y+10	; 0x0a
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	3f ef       	ldi	r19, 0xFF	; 255
    28a2:	4f e7       	ldi	r20, 0x7F	; 127
    28a4:	57 e4       	ldi	r21, 0x47	; 71
    28a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28aa:	18 16       	cp	r1, r24
    28ac:	4c f5       	brge	.+82     	; 0x2900 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e2       	ldi	r20, 0x20	; 32
    28bc:	51 e4       	ldi	r21, 0x41	; 65
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9e 83       	std	Y+6, r25	; 0x06
    28d4:	8d 83       	std	Y+5, r24	; 0x05
    28d6:	0f c0       	rjmp	.+30     	; 0x28f6 <LCD_sendCommand+0x8ac>
    28d8:	80 e9       	ldi	r24, 0x90	; 144
    28da:	91 e0       	ldi	r25, 0x01	; 1
    28dc:	9c 83       	std	Y+4, r25	; 0x04
    28de:	8b 83       	std	Y+3, r24	; 0x03
    28e0:	8b 81       	ldd	r24, Y+3	; 0x03
    28e2:	9c 81       	ldd	r25, Y+4	; 0x04
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <LCD_sendCommand+0x89a>
    28e8:	9c 83       	std	Y+4, r25	; 0x04
    28ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	9e 83       	std	Y+6, r25	; 0x06
    28f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f6:	8d 81       	ldd	r24, Y+5	; 0x05
    28f8:	9e 81       	ldd	r25, Y+6	; 0x06
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	69 f7       	brne	.-38     	; 0x28d8 <LCD_sendCommand+0x88e>
    28fe:	14 c0       	rjmp	.+40     	; 0x2928 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2900:	6f 81       	ldd	r22, Y+7	; 0x07
    2902:	78 85       	ldd	r23, Y+8	; 0x08
    2904:	89 85       	ldd	r24, Y+9	; 0x09
    2906:	9a 85       	ldd	r25, Y+10	; 0x0a
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	9e 83       	std	Y+6, r25	; 0x06
    2912:	8d 83       	std	Y+5, r24	; 0x05
    2914:	8d 81       	ldd	r24, Y+5	; 0x05
    2916:	9e 81       	ldd	r25, Y+6	; 0x06
    2918:	9a 83       	std	Y+2, r25	; 0x02
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	9a 81       	ldd	r25, Y+2	; 0x02
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <LCD_sendCommand+0x8d6>
    2924:	9a 83       	std	Y+2, r25	; 0x02
    2926:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*Delay for processing Tdsw = 100ns*/
	/*Disable LCD E = 0*/
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_LOW);
	_delay_ms(1);/*Delay for processing Th = 13ns*/
#endif
}
    2928:	cd 59       	subi	r28, 0x9D	; 157
    292a:	df 4f       	sbci	r29, 0xFF	; 255
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	08 95       	ret

00002940 <LCD_displayCharacter>:

/*Display the required character on the LCD*/
void LCD_displayCharacter(uint8 character)
{
    2940:	0f 93       	push	r16
    2942:	1f 93       	push	r17
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	c3 56       	subi	r28, 0x63	; 99
    294e:	d0 40       	sbci	r29, 0x00	; 0
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	fe 01       	movw	r30, r28
    295c:	ed 59       	subi	r30, 0x9D	; 157
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 83       	st	Z, r24
	/*RS = 1 for sending command*/
		GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOGIC_HIGH);
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	41 e0       	ldi	r20, 0x01	; 1
    2968:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    296c:	fe 01       	movw	r30, r28
    296e:	e1 5a       	subi	r30, 0xA1	; 161
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	a0 e8       	ldi	r26, 0x80	; 128
    2978:	bf e3       	ldi	r27, 0x3F	; 63
    297a:	80 83       	st	Z, r24
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	a2 83       	std	Z+2, r26	; 0x02
    2980:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2982:	8e 01       	movw	r16, r28
    2984:	05 5a       	subi	r16, 0xA5	; 165
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	fe 01       	movw	r30, r28
    298a:	e1 5a       	subi	r30, 0xA1	; 161
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	4a e7       	ldi	r20, 0x7A	; 122
    299c:	55 e4       	ldi	r21, 0x45	; 69
    299e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	f8 01       	movw	r30, r16
    29a8:	80 83       	st	Z, r24
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	a2 83       	std	Z+2, r26	; 0x02
    29ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b0:	fe 01       	movw	r30, r28
    29b2:	e5 5a       	subi	r30, 0xA5	; 165
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	60 81       	ld	r22, Z
    29b8:	71 81       	ldd	r23, Z+1	; 0x01
    29ba:	82 81       	ldd	r24, Z+2	; 0x02
    29bc:	93 81       	ldd	r25, Z+3	; 0x03
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e8       	ldi	r20, 0x80	; 128
    29c4:	5f e3       	ldi	r21, 0x3F	; 63
    29c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ca:	88 23       	and	r24, r24
    29cc:	44 f4       	brge	.+16     	; 0x29de <LCD_displayCharacter+0x9e>
		__ticks = 1;
    29ce:	fe 01       	movw	r30, r28
    29d0:	e7 5a       	subi	r30, 0xA7	; 167
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
    29dc:	64 c0       	rjmp	.+200    	; 0x2aa6 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    29de:	fe 01       	movw	r30, r28
    29e0:	e5 5a       	subi	r30, 0xA5	; 165
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	60 81       	ld	r22, Z
    29e6:	71 81       	ldd	r23, Z+1	; 0x01
    29e8:	82 81       	ldd	r24, Z+2	; 0x02
    29ea:	93 81       	ldd	r25, Z+3	; 0x03
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	3f ef       	ldi	r19, 0xFF	; 255
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	57 e4       	ldi	r21, 0x47	; 71
    29f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f8:	18 16       	cp	r1, r24
    29fa:	0c f0       	brlt	.+2      	; 0x29fe <LCD_displayCharacter+0xbe>
    29fc:	43 c0       	rjmp	.+134    	; 0x2a84 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fe:	fe 01       	movw	r30, r28
    2a00:	e1 5a       	subi	r30, 0xA1	; 161
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	60 81       	ld	r22, Z
    2a06:	71 81       	ldd	r23, Z+1	; 0x01
    2a08:	82 81       	ldd	r24, Z+2	; 0x02
    2a0a:	93 81       	ldd	r25, Z+3	; 0x03
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	8e 01       	movw	r16, r28
    2a1e:	07 5a       	subi	r16, 0xA7	; 167
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	f8 01       	movw	r30, r16
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
    2a34:	1f c0       	rjmp	.+62     	; 0x2a74 <LCD_displayCharacter+0x134>
    2a36:	fe 01       	movw	r30, r28
    2a38:	e9 5a       	subi	r30, 0xA9	; 169
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 e9       	ldi	r24, 0x90	; 144
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	80 83       	st	Z, r24
    2a44:	fe 01       	movw	r30, r28
    2a46:	e9 5a       	subi	r30, 0xA9	; 169
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <LCD_displayCharacter+0x10e>
    2a52:	fe 01       	movw	r30, r28
    2a54:	e9 5a       	subi	r30, 0xA9	; 169
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5c:	de 01       	movw	r26, r28
    2a5e:	a7 5a       	subi	r26, 0xA7	; 167
    2a60:	bf 4f       	sbci	r27, 0xFF	; 255
    2a62:	fe 01       	movw	r30, r28
    2a64:	e7 5a       	subi	r30, 0xA7	; 167
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	91 81       	ldd	r25, Z+1	; 0x01
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	11 96       	adiw	r26, 0x01	; 1
    2a70:	9c 93       	st	X, r25
    2a72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a74:	fe 01       	movw	r30, r28
    2a76:	e7 5a       	subi	r30, 0xA7	; 167
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	d1 f6       	brne	.-76     	; 0x2a36 <LCD_displayCharacter+0xf6>
    2a82:	27 c0       	rjmp	.+78     	; 0x2ad2 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a84:	8e 01       	movw	r16, r28
    2a86:	07 5a       	subi	r16, 0xA7	; 167
    2a88:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e5 5a       	subi	r30, 0xA5	; 165
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	60 81       	ld	r22, Z
    2a92:	71 81       	ldd	r23, Z+1	; 0x01
    2a94:	82 81       	ldd	r24, Z+2	; 0x02
    2a96:	93 81       	ldd	r25, Z+3	; 0x03
    2a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
    2aa6:	de 01       	movw	r26, r28
    2aa8:	ab 5a       	subi	r26, 0xAB	; 171
    2aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    2aac:	fe 01       	movw	r30, r28
    2aae:	e7 5a       	subi	r30, 0xA7	; 167
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	8d 93       	st	X+, r24
    2ab8:	9c 93       	st	X, r25
    2aba:	fe 01       	movw	r30, r28
    2abc:	eb 5a       	subi	r30, 0xAB	; 171
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <LCD_displayCharacter+0x184>
    2ac8:	fe 01       	movw	r30, r28
    2aca:	eb 5a       	subi	r30, 0xAB	; 171
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
		_delay_ms(1); /*Delay for processing Tas = 50ns*/
		/*Enable LCD E = 1*/
		GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_HIGH);
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	62 e0       	ldi	r22, 0x02	; 2
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    2adc:	fe 01       	movw	r30, r28
    2ade:	ef 5a       	subi	r30, 0xAF	; 175
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	a0 e8       	ldi	r26, 0x80	; 128
    2ae8:	bf e3       	ldi	r27, 0x3F	; 63
    2aea:	80 83       	st	Z, r24
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	a2 83       	std	Z+2, r26	; 0x02
    2af0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af2:	8e 01       	movw	r16, r28
    2af4:	03 5b       	subi	r16, 0xB3	; 179
    2af6:	1f 4f       	sbci	r17, 0xFF	; 255
    2af8:	fe 01       	movw	r30, r28
    2afa:	ef 5a       	subi	r30, 0xAF	; 175
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4a e7       	ldi	r20, 0x7A	; 122
    2b0c:	55 e4       	ldi	r21, 0x45	; 69
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	f8 01       	movw	r30, r16
    2b18:	80 83       	st	Z, r24
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	a2 83       	std	Z+2, r26	; 0x02
    2b1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b20:	fe 01       	movw	r30, r28
    2b22:	e3 5b       	subi	r30, 0xB3	; 179
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	44 f4       	brge	.+16     	; 0x2b4e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e5 5b       	subi	r30, 0xB5	; 181
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	64 c0       	rjmp	.+200    	; 0x2c16 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e3 5b       	subi	r30, 0xB3	; 179
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	60 81       	ld	r22, Z
    2b56:	71 81       	ldd	r23, Z+1	; 0x01
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	93 81       	ldd	r25, Z+3	; 0x03
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
    2b60:	4f e7       	ldi	r20, 0x7F	; 127
    2b62:	57 e4       	ldi	r21, 0x47	; 71
    2b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b68:	18 16       	cp	r1, r24
    2b6a:	0c f0       	brlt	.+2      	; 0x2b6e <LCD_displayCharacter+0x22e>
    2b6c:	43 c0       	rjmp	.+134    	; 0x2bf4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ef 5a       	subi	r30, 0xAF	; 175
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e2       	ldi	r20, 0x20	; 32
    2b82:	51 e4       	ldi	r21, 0x41	; 65
    2b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	8e 01       	movw	r16, r28
    2b8e:	05 5b       	subi	r16, 0xB5	; 181
    2b90:	1f 4f       	sbci	r17, 0xFF	; 255
    2b92:	bc 01       	movw	r22, r24
    2b94:	cd 01       	movw	r24, r26
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	1f c0       	rjmp	.+62     	; 0x2be4 <LCD_displayCharacter+0x2a4>
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e7 5b       	subi	r30, 0xB7	; 183
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 e9       	ldi	r24, 0x90	; 144
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	80 83       	st	Z, r24
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e7 5b       	subi	r30, 0xB7	; 183
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <LCD_displayCharacter+0x27e>
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e7 5b       	subi	r30, 0xB7	; 183
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bcc:	de 01       	movw	r26, r28
    2bce:	a5 5b       	subi	r26, 0xB5	; 181
    2bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e5 5b       	subi	r30, 0xB5	; 181
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	11 96       	adiw	r26, 0x01	; 1
    2be0:	9c 93       	st	X, r25
    2be2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	fe 01       	movw	r30, r28
    2be6:	e5 5b       	subi	r30, 0xB5	; 181
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	d1 f6       	brne	.-76     	; 0x2ba6 <LCD_displayCharacter+0x266>
    2bf2:	27 c0       	rjmp	.+78     	; 0x2c42 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf4:	8e 01       	movw	r16, r28
    2bf6:	05 5b       	subi	r16, 0xB5	; 181
    2bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e3 5b       	subi	r30, 0xB3	; 179
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	60 81       	ld	r22, Z
    2c02:	71 81       	ldd	r23, Z+1	; 0x01
    2c04:	82 81       	ldd	r24, Z+2	; 0x02
    2c06:	93 81       	ldd	r25, Z+3	; 0x03
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	f8 01       	movw	r30, r16
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	de 01       	movw	r26, r28
    2c18:	a9 5b       	subi	r26, 0xB9	; 185
    2c1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e5 5b       	subi	r30, 0xB5	; 181
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	8d 93       	st	X+, r24
    2c28:	9c 93       	st	X, r25
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e9 5b       	subi	r30, 0xB9	; 185
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_displayCharacter+0x2f4>
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e9 5b       	subi	r30, 0xB9	; 185
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24
		_delay_ms(1); /*Delay for processing Tpw - Tdws = 190ns*/

	#if(LCD_DATA_BITS_MODE == 4)
		/*send the required 8 bits command on two times through the same 4 pins*/
		GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN4,GET_BIT(character,4));
    2c42:	fe 01       	movw	r30, r28
    2c44:	ed 59       	subi	r30, 0x9D	; 157
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	80 71       	andi	r24, 0x10	; 16
    2c50:	90 70       	andi	r25, 0x00	; 0
    2c52:	95 95       	asr	r25
    2c54:	87 95       	ror	r24
    2c56:	95 95       	asr	r25
    2c58:	87 95       	ror	r24
    2c5a:	95 95       	asr	r25
    2c5c:	87 95       	ror	r24
    2c5e:	95 95       	asr	r25
    2c60:	87 95       	ror	r24
    2c62:	98 2f       	mov	r25, r24
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	63 e0       	ldi	r22, 0x03	; 3
    2c68:	49 2f       	mov	r20, r25
    2c6a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN5,GET_BIT(character,5));
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ed 59       	subi	r30, 0x9D	; 157
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	80 72       	andi	r24, 0x20	; 32
    2c7c:	90 70       	andi	r25, 0x00	; 0
    2c7e:	95 95       	asr	r25
    2c80:	87 95       	ror	r24
    2c82:	95 95       	asr	r25
    2c84:	87 95       	ror	r24
    2c86:	95 95       	asr	r25
    2c88:	87 95       	ror	r24
    2c8a:	95 95       	asr	r25
    2c8c:	87 95       	ror	r24
    2c8e:	95 95       	asr	r25
    2c90:	87 95       	ror	r24
    2c92:	98 2f       	mov	r25, r24
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	64 e0       	ldi	r22, 0x04	; 4
    2c98:	49 2f       	mov	r20, r25
    2c9a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN6,GET_BIT(character,6));
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ed 59       	subi	r30, 0x9D	; 157
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 81       	ld	r24, Z
    2ca6:	88 2f       	mov	r24, r24
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	80 74       	andi	r24, 0x40	; 64
    2cac:	90 70       	andi	r25, 0x00	; 0
    2cae:	08 2e       	mov	r0, r24
    2cb0:	89 2f       	mov	r24, r25
    2cb2:	00 0c       	add	r0, r0
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	99 0b       	sbc	r25, r25
    2cb8:	00 0c       	add	r0, r0
    2cba:	88 1f       	adc	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	98 2f       	mov	r25, r24
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	65 e0       	ldi	r22, 0x05	; 5
    2cc4:	49 2f       	mov	r20, r25
    2cc6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN7,GET_BIT(character,7));
    2cca:	fe 01       	movw	r30, r28
    2ccc:	ed 59       	subi	r30, 0x9D	; 157
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 81       	ld	r24, Z
    2cd2:	98 2f       	mov	r25, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	99 27       	eor	r25, r25
    2cd8:	99 1f       	adc	r25, r25
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	66 e0       	ldi	r22, 0x06	; 6
    2cde:	49 2f       	mov	r20, r25
    2ce0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ed 5b       	subi	r30, 0xBD	; 189
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	a0 e8       	ldi	r26, 0x80	; 128
    2cf0:	bf e3       	ldi	r27, 0x3F	; 63
    2cf2:	80 83       	st	Z, r24
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	a2 83       	std	Z+2, r26	; 0x02
    2cf8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfa:	8e 01       	movw	r16, r28
    2cfc:	01 5c       	subi	r16, 0xC1	; 193
    2cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2d00:	fe 01       	movw	r30, r28
    2d02:	ed 5b       	subi	r30, 0xBD	; 189
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	4a e7       	ldi	r20, 0x7A	; 122
    2d14:	55 e4       	ldi	r21, 0x45	; 69
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	f8 01       	movw	r30, r16
    2d20:	80 83       	st	Z, r24
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	a2 83       	std	Z+2, r26	; 0x02
    2d26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ff 96       	adiw	r30, 0x3f	; 63
    2d2c:	60 81       	ld	r22, Z
    2d2e:	71 81       	ldd	r23, Z+1	; 0x01
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9e af       	std	Y+62, r25	; 0x3e
    2d4a:	8d af       	std	Y+61, r24	; 0x3d
    2d4c:	46 c0       	rjmp	.+140    	; 0x2dda <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2d4e:	fe 01       	movw	r30, r28
    2d50:	ff 96       	adiw	r30, 0x3f	; 63
    2d52:	60 81       	ld	r22, Z
    2d54:	71 81       	ldd	r23, Z+1	; 0x01
    2d56:	82 81       	ldd	r24, Z+2	; 0x02
    2d58:	93 81       	ldd	r25, Z+3	; 0x03
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	3f ef       	ldi	r19, 0xFF	; 255
    2d5e:	4f e7       	ldi	r20, 0x7F	; 127
    2d60:	57 e4       	ldi	r21, 0x47	; 71
    2d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d66:	18 16       	cp	r1, r24
    2d68:	64 f5       	brge	.+88     	; 0x2dc2 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	ed 5b       	subi	r30, 0xBD	; 189
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	60 81       	ld	r22, Z
    2d72:	71 81       	ldd	r23, Z+1	; 0x01
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	93 81       	ldd	r25, Z+3	; 0x03
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e2       	ldi	r20, 0x20	; 32
    2d7e:	51 e4       	ldi	r21, 0x41	; 65
    2d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	9e af       	std	Y+62, r25	; 0x3e
    2d96:	8d af       	std	Y+61, r24	; 0x3d
    2d98:	0f c0       	rjmp	.+30     	; 0x2db8 <LCD_displayCharacter+0x478>
    2d9a:	80 e9       	ldi	r24, 0x90	; 144
    2d9c:	91 e0       	ldi	r25, 0x01	; 1
    2d9e:	9c af       	std	Y+60, r25	; 0x3c
    2da0:	8b af       	std	Y+59, r24	; 0x3b
    2da2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2da4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <LCD_displayCharacter+0x466>
    2daa:	9c af       	std	Y+60, r25	; 0x3c
    2dac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2db0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	9e af       	std	Y+62, r25	; 0x3e
    2db6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dba:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	69 f7       	brne	.-38     	; 0x2d9a <LCD_displayCharacter+0x45a>
    2dc0:	16 c0       	rjmp	.+44     	; 0x2dee <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ff 96       	adiw	r30, 0x3f	; 63
    2dc6:	60 81       	ld	r22, Z
    2dc8:	71 81       	ldd	r23, Z+1	; 0x01
    2dca:	82 81       	ldd	r24, Z+2	; 0x02
    2dcc:	93 81       	ldd	r25, Z+3	; 0x03
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e af       	std	Y+62, r25	; 0x3e
    2dd8:	8d af       	std	Y+61, r24	; 0x3d
    2dda:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ddc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dde:	9a af       	std	Y+58, r25	; 0x3a
    2de0:	89 af       	std	Y+57, r24	; 0x39
    2de2:	89 ad       	ldd	r24, Y+57	; 0x39
    2de4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <LCD_displayCharacter+0x4a6>
    2dea:	9a af       	std	Y+58, r25	; 0x3a
    2dec:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1); /*Delay for processing Tdsw = 100ns*/
		/*Disable LCD E = 0*/
		GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_LOW);
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	62 e0       	ldi	r22, 0x02	; 2
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	a0 e8       	ldi	r26, 0x80	; 128
    2dfe:	bf e3       	ldi	r27, 0x3F	; 63
    2e00:	8d ab       	std	Y+53, r24	; 0x35
    2e02:	9e ab       	std	Y+54, r25	; 0x36
    2e04:	af ab       	std	Y+55, r26	; 0x37
    2e06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e08:	6d a9       	ldd	r22, Y+53	; 0x35
    2e0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	4a e7       	ldi	r20, 0x7A	; 122
    2e16:	55 e4       	ldi	r21, 0x45	; 69
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	89 ab       	std	Y+49, r24	; 0x31
    2e22:	9a ab       	std	Y+50, r25	; 0x32
    2e24:	ab ab       	std	Y+51, r26	; 0x33
    2e26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e28:	69 a9       	ldd	r22, Y+49	; 0x31
    2e2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e8       	ldi	r20, 0x80	; 128
    2e36:	5f e3       	ldi	r21, 0x3F	; 63
    2e38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e3c:	88 23       	and	r24, r24
    2e3e:	2c f4       	brge	.+10     	; 0x2e4a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	98 ab       	std	Y+48, r25	; 0x30
    2e46:	8f a7       	std	Y+47, r24	; 0x2f
    2e48:	3f c0       	rjmp	.+126    	; 0x2ec8 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2e4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e50:	9c a9       	ldd	r25, Y+52	; 0x34
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	3f ef       	ldi	r19, 0xFF	; 255
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	57 e4       	ldi	r21, 0x47	; 71
    2e5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e5e:	18 16       	cp	r1, r24
    2e60:	4c f5       	brge	.+82     	; 0x2eb4 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e62:	6d a9       	ldd	r22, Y+53	; 0x35
    2e64:	7e a9       	ldd	r23, Y+54	; 0x36
    2e66:	8f a9       	ldd	r24, Y+55	; 0x37
    2e68:	98 ad       	ldd	r25, Y+56	; 0x38
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e2       	ldi	r20, 0x20	; 32
    2e70:	51 e4       	ldi	r21, 0x41	; 65
    2e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	98 ab       	std	Y+48, r25	; 0x30
    2e88:	8f a7       	std	Y+47, r24	; 0x2f
    2e8a:	0f c0       	rjmp	.+30     	; 0x2eaa <LCD_displayCharacter+0x56a>
    2e8c:	80 e9       	ldi	r24, 0x90	; 144
    2e8e:	91 e0       	ldi	r25, 0x01	; 1
    2e90:	9e a7       	std	Y+46, r25	; 0x2e
    2e92:	8d a7       	std	Y+45, r24	; 0x2d
    2e94:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e96:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <LCD_displayCharacter+0x558>
    2e9c:	9e a7       	std	Y+46, r25	; 0x2e
    2e9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	98 ab       	std	Y+48, r25	; 0x30
    2ea8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eac:	98 a9       	ldd	r25, Y+48	; 0x30
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	69 f7       	brne	.-38     	; 0x2e8c <LCD_displayCharacter+0x54c>
    2eb2:	14 c0       	rjmp	.+40     	; 0x2edc <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb4:	69 a9       	ldd	r22, Y+49	; 0x31
    2eb6:	7a a9       	ldd	r23, Y+50	; 0x32
    2eb8:	8b a9       	ldd	r24, Y+51	; 0x33
    2eba:	9c a9       	ldd	r25, Y+52	; 0x34
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	98 ab       	std	Y+48, r25	; 0x30
    2ec6:	8f a7       	std	Y+47, r24	; 0x2f
    2ec8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eca:	98 a9       	ldd	r25, Y+48	; 0x30
    2ecc:	9c a7       	std	Y+44, r25	; 0x2c
    2ece:	8b a7       	std	Y+43, r24	; 0x2b
    2ed0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ed2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <LCD_displayCharacter+0x594>
    2ed8:	9c a7       	std	Y+44, r25	; 0x2c
    2eda:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);/*Delay for processing Th = 13ns*/

		/*Enable LCD E = 1*/
		GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_HIGH);
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	62 e0       	ldi	r22, 0x02	; 2
    2ee0:	41 e0       	ldi	r20, 0x01	; 1
    2ee2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	a0 e8       	ldi	r26, 0x80	; 128
    2eec:	bf e3       	ldi	r27, 0x3F	; 63
    2eee:	8f a3       	std	Y+39, r24	; 0x27
    2ef0:	98 a7       	std	Y+40, r25	; 0x28
    2ef2:	a9 a7       	std	Y+41, r26	; 0x29
    2ef4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef8:	78 a5       	ldd	r23, Y+40	; 0x28
    2efa:	89 a5       	ldd	r24, Y+41	; 0x29
    2efc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	4a e7       	ldi	r20, 0x7A	; 122
    2f04:	55 e4       	ldi	r21, 0x45	; 69
    2f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	8b a3       	std	Y+35, r24	; 0x23
    2f10:	9c a3       	std	Y+36, r25	; 0x24
    2f12:	ad a3       	std	Y+37, r26	; 0x25
    2f14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f16:	6b a1       	ldd	r22, Y+35	; 0x23
    2f18:	7c a1       	ldd	r23, Y+36	; 0x24
    2f1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e8       	ldi	r20, 0x80	; 128
    2f24:	5f e3       	ldi	r21, 0x3F	; 63
    2f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2a:	88 23       	and	r24, r24
    2f2c:	2c f4       	brge	.+10     	; 0x2f38 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	9a a3       	std	Y+34, r25	; 0x22
    2f34:	89 a3       	std	Y+33, r24	; 0x21
    2f36:	3f c0       	rjmp	.+126    	; 0x2fb6 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2f38:	6b a1       	ldd	r22, Y+35	; 0x23
    2f3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	3f ef       	ldi	r19, 0xFF	; 255
    2f44:	4f e7       	ldi	r20, 0x7F	; 127
    2f46:	57 e4       	ldi	r21, 0x47	; 71
    2f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4c:	18 16       	cp	r1, r24
    2f4e:	4c f5       	brge	.+82     	; 0x2fa2 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f50:	6f a1       	ldd	r22, Y+39	; 0x27
    2f52:	78 a5       	ldd	r23, Y+40	; 0x28
    2f54:	89 a5       	ldd	r24, Y+41	; 0x29
    2f56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e2       	ldi	r20, 0x20	; 32
    2f5e:	51 e4       	ldi	r21, 0x41	; 65
    2f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	bc 01       	movw	r22, r24
    2f6a:	cd 01       	movw	r24, r26
    2f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	9a a3       	std	Y+34, r25	; 0x22
    2f76:	89 a3       	std	Y+33, r24	; 0x21
    2f78:	0f c0       	rjmp	.+30     	; 0x2f98 <LCD_displayCharacter+0x658>
    2f7a:	80 e9       	ldi	r24, 0x90	; 144
    2f7c:	91 e0       	ldi	r25, 0x01	; 1
    2f7e:	98 a3       	std	Y+32, r25	; 0x20
    2f80:	8f 8f       	std	Y+31, r24	; 0x1f
    2f82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f84:	98 a1       	ldd	r25, Y+32	; 0x20
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	f1 f7       	brne	.-4      	; 0x2f86 <LCD_displayCharacter+0x646>
    2f8a:	98 a3       	std	Y+32, r25	; 0x20
    2f8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f90:	9a a1       	ldd	r25, Y+34	; 0x22
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	9a a3       	std	Y+34, r25	; 0x22
    2f96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f98:	89 a1       	ldd	r24, Y+33	; 0x21
    2f9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9c:	00 97       	sbiw	r24, 0x00	; 0
    2f9e:	69 f7       	brne	.-38     	; 0x2f7a <LCD_displayCharacter+0x63a>
    2fa0:	14 c0       	rjmp	.+40     	; 0x2fca <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9a a3       	std	Y+34, r25	; 0x22
    2fb4:	89 a3       	std	Y+33, r24	; 0x21
    2fb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2fb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2fba:	9e 8f       	std	Y+30, r25	; 0x1e
    2fbc:	8d 8f       	std	Y+29, r24	; 0x1d
    2fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <LCD_displayCharacter+0x682>
    2fc6:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /*Delay for processing Tpw - Tdws = 190ns*/

		GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN4,GET_BIT(character,0));
    2fca:	fe 01       	movw	r30, r28
    2fcc:	ed 59       	subi	r30, 0x9D	; 157
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	80 81       	ld	r24, Z
    2fd2:	98 2f       	mov	r25, r24
    2fd4:	91 70       	andi	r25, 0x01	; 1
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	63 e0       	ldi	r22, 0x03	; 3
    2fda:	49 2f       	mov	r20, r25
    2fdc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN5,GET_BIT(character,1));
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	ed 59       	subi	r30, 0x9D	; 157
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	80 81       	ld	r24, Z
    2fe8:	88 2f       	mov	r24, r24
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	82 70       	andi	r24, 0x02	; 2
    2fee:	90 70       	andi	r25, 0x00	; 0
    2ff0:	95 95       	asr	r25
    2ff2:	87 95       	ror	r24
    2ff4:	98 2f       	mov	r25, r24
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	64 e0       	ldi	r22, 0x04	; 4
    2ffa:	49 2f       	mov	r20, r25
    2ffc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN6,GET_BIT(character,2));
    3000:	fe 01       	movw	r30, r28
    3002:	ed 59       	subi	r30, 0x9D	; 157
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	80 81       	ld	r24, Z
    3008:	88 2f       	mov	r24, r24
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	84 70       	andi	r24, 0x04	; 4
    300e:	90 70       	andi	r25, 0x00	; 0
    3010:	95 95       	asr	r25
    3012:	87 95       	ror	r24
    3014:	95 95       	asr	r25
    3016:	87 95       	ror	r24
    3018:	98 2f       	mov	r25, r24
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	65 e0       	ldi	r22, 0x05	; 5
    301e:	49 2f       	mov	r20, r25
    3020:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_BUS_PORT,LCD_DATA_BUS_PIN7,GET_BIT(character,3));
    3024:	fe 01       	movw	r30, r28
    3026:	ed 59       	subi	r30, 0x9D	; 157
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	80 81       	ld	r24, Z
    302c:	88 2f       	mov	r24, r24
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	88 70       	andi	r24, 0x08	; 8
    3032:	90 70       	andi	r25, 0x00	; 0
    3034:	95 95       	asr	r25
    3036:	87 95       	ror	r24
    3038:	95 95       	asr	r25
    303a:	87 95       	ror	r24
    303c:	95 95       	asr	r25
    303e:	87 95       	ror	r24
    3040:	98 2f       	mov	r25, r24
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	66 e0       	ldi	r22, 0x06	; 6
    3046:	49 2f       	mov	r20, r25
    3048:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	a0 e8       	ldi	r26, 0x80	; 128
    3052:	bf e3       	ldi	r27, 0x3F	; 63
    3054:	89 8f       	std	Y+25, r24	; 0x19
    3056:	9a 8f       	std	Y+26, r25	; 0x1a
    3058:	ab 8f       	std	Y+27, r26	; 0x1b
    305a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305c:	69 8d       	ldd	r22, Y+25	; 0x19
    305e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3060:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3062:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	4a e7       	ldi	r20, 0x7A	; 122
    306a:	55 e4       	ldi	r21, 0x45	; 69
    306c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	8d 8b       	std	Y+21, r24	; 0x15
    3076:	9e 8b       	std	Y+22, r25	; 0x16
    3078:	af 8b       	std	Y+23, r26	; 0x17
    307a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    307c:	6d 89       	ldd	r22, Y+21	; 0x15
    307e:	7e 89       	ldd	r23, Y+22	; 0x16
    3080:	8f 89       	ldd	r24, Y+23	; 0x17
    3082:	98 8d       	ldd	r25, Y+24	; 0x18
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e8       	ldi	r20, 0x80	; 128
    308a:	5f e3       	ldi	r21, 0x3F	; 63
    308c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3090:	88 23       	and	r24, r24
    3092:	2c f4       	brge	.+10     	; 0x309e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	9c 8b       	std	Y+20, r25	; 0x14
    309a:	8b 8b       	std	Y+19, r24	; 0x13
    309c:	3f c0       	rjmp	.+126    	; 0x311c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    309e:	6d 89       	ldd	r22, Y+21	; 0x15
    30a0:	7e 89       	ldd	r23, Y+22	; 0x16
    30a2:	8f 89       	ldd	r24, Y+23	; 0x17
    30a4:	98 8d       	ldd	r25, Y+24	; 0x18
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	3f ef       	ldi	r19, 0xFF	; 255
    30aa:	4f e7       	ldi	r20, 0x7F	; 127
    30ac:	57 e4       	ldi	r21, 0x47	; 71
    30ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b2:	18 16       	cp	r1, r24
    30b4:	4c f5       	brge	.+82     	; 0x3108 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b6:	69 8d       	ldd	r22, Y+25	; 0x19
    30b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e2       	ldi	r20, 0x20	; 32
    30c4:	51 e4       	ldi	r21, 0x41	; 65
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9c 8b       	std	Y+20, r25	; 0x14
    30dc:	8b 8b       	std	Y+19, r24	; 0x13
    30de:	0f c0       	rjmp	.+30     	; 0x30fe <LCD_displayCharacter+0x7be>
    30e0:	80 e9       	ldi	r24, 0x90	; 144
    30e2:	91 e0       	ldi	r25, 0x01	; 1
    30e4:	9a 8b       	std	Y+18, r25	; 0x12
    30e6:	89 8b       	std	Y+17, r24	; 0x11
    30e8:	89 89       	ldd	r24, Y+17	; 0x11
    30ea:	9a 89       	ldd	r25, Y+18	; 0x12
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <LCD_displayCharacter+0x7ac>
    30f0:	9a 8b       	std	Y+18, r25	; 0x12
    30f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f4:	8b 89       	ldd	r24, Y+19	; 0x13
    30f6:	9c 89       	ldd	r25, Y+20	; 0x14
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	9c 8b       	std	Y+20, r25	; 0x14
    30fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3100:	9c 89       	ldd	r25, Y+20	; 0x14
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	69 f7       	brne	.-38     	; 0x30e0 <LCD_displayCharacter+0x7a0>
    3106:	14 c0       	rjmp	.+40     	; 0x3130 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3108:	6d 89       	ldd	r22, Y+21	; 0x15
    310a:	7e 89       	ldd	r23, Y+22	; 0x16
    310c:	8f 89       	ldd	r24, Y+23	; 0x17
    310e:	98 8d       	ldd	r25, Y+24	; 0x18
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	9c 8b       	std	Y+20, r25	; 0x14
    311a:	8b 8b       	std	Y+19, r24	; 0x13
    311c:	8b 89       	ldd	r24, Y+19	; 0x13
    311e:	9c 89       	ldd	r25, Y+20	; 0x14
    3120:	98 8b       	std	Y+16, r25	; 0x10
    3122:	8f 87       	std	Y+15, r24	; 0x0f
    3124:	8f 85       	ldd	r24, Y+15	; 0x0f
    3126:	98 89       	ldd	r25, Y+16	; 0x10
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <LCD_displayCharacter+0x7e8>
    312c:	98 8b       	std	Y+16, r25	; 0x10
    312e:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1); /*Delay for processing Tdsw = 100ns*/
		/*Disable LCD E = 0*/
		GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_LOW);
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	62 e0       	ldi	r22, 0x02	; 2
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_writePin>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	a0 e8       	ldi	r26, 0x80	; 128
    3140:	bf e3       	ldi	r27, 0x3F	; 63
    3142:	8b 87       	std	Y+11, r24	; 0x0b
    3144:	9c 87       	std	Y+12, r25	; 0x0c
    3146:	ad 87       	std	Y+13, r26	; 0x0d
    3148:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314a:	6b 85       	ldd	r22, Y+11	; 0x0b
    314c:	7c 85       	ldd	r23, Y+12	; 0x0c
    314e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3150:	9e 85       	ldd	r25, Y+14	; 0x0e
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a e7       	ldi	r20, 0x7A	; 122
    3158:	55 e4       	ldi	r21, 0x45	; 69
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	8f 83       	std	Y+7, r24	; 0x07
    3164:	98 87       	std	Y+8, r25	; 0x08
    3166:	a9 87       	std	Y+9, r26	; 0x09
    3168:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    316a:	6f 81       	ldd	r22, Y+7	; 0x07
    316c:	78 85       	ldd	r23, Y+8	; 0x08
    316e:	89 85       	ldd	r24, Y+9	; 0x09
    3170:	9a 85       	ldd	r25, Y+10	; 0x0a
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e8       	ldi	r20, 0x80	; 128
    3178:	5f e3       	ldi	r21, 0x3F	; 63
    317a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    317e:	88 23       	and	r24, r24
    3180:	2c f4       	brge	.+10     	; 0x318c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	9e 83       	std	Y+6, r25	; 0x06
    3188:	8d 83       	std	Y+5, r24	; 0x05
    318a:	3f c0       	rjmp	.+126    	; 0x320a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    318c:	6f 81       	ldd	r22, Y+7	; 0x07
    318e:	78 85       	ldd	r23, Y+8	; 0x08
    3190:	89 85       	ldd	r24, Y+9	; 0x09
    3192:	9a 85       	ldd	r25, Y+10	; 0x0a
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	3f ef       	ldi	r19, 0xFF	; 255
    3198:	4f e7       	ldi	r20, 0x7F	; 127
    319a:	57 e4       	ldi	r21, 0x47	; 71
    319c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a0:	18 16       	cp	r1, r24
    31a2:	4c f5       	brge	.+82     	; 0x31f6 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e2       	ldi	r20, 0x20	; 32
    31b2:	51 e4       	ldi	r21, 0x41	; 65
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	9e 83       	std	Y+6, r25	; 0x06
    31ca:	8d 83       	std	Y+5, r24	; 0x05
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <LCD_displayCharacter+0x8ac>
    31ce:	80 e9       	ldi	r24, 0x90	; 144
    31d0:	91 e0       	ldi	r25, 0x01	; 1
    31d2:	9c 83       	std	Y+4, r25	; 0x04
    31d4:	8b 83       	std	Y+3, r24	; 0x03
    31d6:	8b 81       	ldd	r24, Y+3	; 0x03
    31d8:	9c 81       	ldd	r25, Y+4	; 0x04
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <LCD_displayCharacter+0x89a>
    31de:	9c 83       	std	Y+4, r25	; 0x04
    31e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e2:	8d 81       	ldd	r24, Y+5	; 0x05
    31e4:	9e 81       	ldd	r25, Y+6	; 0x06
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	9e 83       	std	Y+6, r25	; 0x06
    31ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	69 f7       	brne	.-38     	; 0x31ce <LCD_displayCharacter+0x88e>
    31f4:	14 c0       	rjmp	.+40     	; 0x321e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f6:	6f 81       	ldd	r22, Y+7	; 0x07
    31f8:	78 85       	ldd	r23, Y+8	; 0x08
    31fa:	89 85       	ldd	r24, Y+9	; 0x09
    31fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	9e 83       	std	Y+6, r25	; 0x06
    3208:	8d 83       	std	Y+5, r24	; 0x05
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	9e 81       	ldd	r25, Y+6	; 0x06
    320e:	9a 83       	std	Y+2, r25	; 0x02
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	9a 81       	ldd	r25, Y+2	; 0x02
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <LCD_displayCharacter+0x8d6>
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /*Delay for processing Tdsw = 100ns*/
		/*Disable LCD E = 0*/
		GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_LOW);
		_delay_ms(1);/*Delay for processing Th = 13ns*/
	#endif
}
    321e:	cd 59       	subi	r28, 0x9D	; 157
    3220:	df 4f       	sbci	r29, 0xFF	; 255
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	08 95       	ret

00003236 <LCD_displayString>:

/*Display the required string on the lCD*/
void LCD_displayString(const sint8* string)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <LCD_displayString+0x6>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	0a c0       	rjmp	.+20     	; 0x325a <LCD_displayString+0x24>
	while(*(string) != '\0')
	{
		LCD_displayCharacter(*string);
    3246:	e9 81       	ldd	r30, Y+1	; 0x01
    3248:	fa 81       	ldd	r31, Y+2	; 0x02
    324a:	80 81       	ld	r24, Z
    324c:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_displayCharacter>
		string++;
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	9a 81       	ldd	r25, Y+2	; 0x02
    3254:	01 96       	adiw	r24, 0x01	; 1
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
}

/*Display the required string on the lCD*/
void LCD_displayString(const sint8* string)
{
	while(*(string) != '\0')
    325a:	e9 81       	ldd	r30, Y+1	; 0x01
    325c:	fa 81       	ldd	r31, Y+2	; 0x02
    325e:	80 81       	ld	r24, Z
    3260:	88 23       	and	r24, r24
    3262:	89 f7       	brne	.-30     	; 0x3246 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*string);
		string++;
	}
}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <LCD_moveCursor>:

/*Move the cursor to a specified row and column on the LCD*/
void LCD_moveCursor(uint8 row,uint8 column)
{
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	00 d0       	rcall	.+0      	; 0x3274 <LCD_moveCursor+0x6>
    3274:	00 d0       	rcall	.+0      	; 0x3276 <LCD_moveCursor+0x8>
    3276:	0f 92       	push	r0
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	8a 83       	std	Y+2, r24	; 0x02
    327e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	/*Calculate the required address in the LCD DDRAM*/
	switch(row)
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	28 2f       	mov	r18, r24
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	3d 83       	std	Y+5, r19	; 0x05
    3288:	2c 83       	std	Y+4, r18	; 0x04
    328a:	8c 81       	ldd	r24, Y+4	; 0x04
    328c:	9d 81       	ldd	r25, Y+5	; 0x05
    328e:	81 30       	cpi	r24, 0x01	; 1
    3290:	91 05       	cpc	r25, r1
    3292:	c1 f0       	breq	.+48     	; 0x32c4 <LCD_moveCursor+0x56>
    3294:	2c 81       	ldd	r18, Y+4	; 0x04
    3296:	3d 81       	ldd	r19, Y+5	; 0x05
    3298:	22 30       	cpi	r18, 0x02	; 2
    329a:	31 05       	cpc	r19, r1
    329c:	2c f4       	brge	.+10     	; 0x32a8 <LCD_moveCursor+0x3a>
    329e:	8c 81       	ldd	r24, Y+4	; 0x04
    32a0:	9d 81       	ldd	r25, Y+5	; 0x05
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	61 f0       	breq	.+24     	; 0x32be <LCD_moveCursor+0x50>
    32a6:	19 c0       	rjmp	.+50     	; 0x32da <LCD_moveCursor+0x6c>
    32a8:	2c 81       	ldd	r18, Y+4	; 0x04
    32aa:	3d 81       	ldd	r19, Y+5	; 0x05
    32ac:	22 30       	cpi	r18, 0x02	; 2
    32ae:	31 05       	cpc	r19, r1
    32b0:	69 f0       	breq	.+26     	; 0x32cc <LCD_moveCursor+0x5e>
    32b2:	8c 81       	ldd	r24, Y+4	; 0x04
    32b4:	9d 81       	ldd	r25, Y+5	; 0x05
    32b6:	83 30       	cpi	r24, 0x03	; 3
    32b8:	91 05       	cpc	r25, r1
    32ba:	61 f0       	breq	.+24     	; 0x32d4 <LCD_moveCursor+0x66>
    32bc:	0e c0       	rjmp	.+28     	; 0x32da <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address = column;
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	0b c0       	rjmp	.+22     	; 0x32da <LCD_moveCursor+0x6c>
			break;
		case 1:
			lcd_memory_address = column + 0x40;
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	80 5c       	subi	r24, 0xC0	; 192
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	07 c0       	rjmp	.+14     	; 0x32da <LCD_moveCursor+0x6c>
			break;
		case 2:
			lcd_memory_address = column + 0x10;
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	80 5f       	subi	r24, 0xF0	; 240
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	03 c0       	rjmp	.+6      	; 0x32da <LCD_moveCursor+0x6c>
			break;
		case 3:
			lcd_memory_address = column + 0x50;
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	80 5b       	subi	r24, 0xB0	; 176
    32d8:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	/*Move the LCD cursor to the calculated address*/
	LCD_sendCommand(lcd_memory_address | LCD_MOVE_CURSOR_TO_FIRST_LINE);
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	80 68       	ori	r24, 0x80	; 128
    32de:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
}
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	08 95       	ret

000032f2 <LCD_displayStringRowColumn>:

/*Display the required string in sepcified position on teh LCD*/
void LCD_displayStringRowColumn(uint8 row,uint8 column,const sint8* string)
{
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	00 d0       	rcall	.+0      	; 0x32f8 <LCD_displayStringRowColumn+0x6>
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <LCD_displayStringRowColumn+0x8>
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	6a 83       	std	Y+2, r22	; 0x02
    3302:	5c 83       	std	Y+4, r21	; 0x04
    3304:	4b 83       	std	Y+3, r20	; 0x03
	/*Go to the required LCD position*/
	LCD_moveCursor(row,column);
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	6a 81       	ldd	r22, Y+2	; 0x02
    330a:	0e 94 37 19 	call	0x326e	; 0x326e <LCD_moveCursor>
	/*Display the string*/
	LCD_displayString(string);
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_displayString>
}
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	cf 91       	pop	r28
    3320:	df 91       	pop	r29
    3322:	08 95       	ret

00003324 <LCD_integerToString>:

/*Display the required decimal value to the screen*/
void LCD_integerToString(int data)
{
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	62 97       	sbiw	r28, 0x12	; 18
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	cd bf       	out	0x3d, r28	; 61
    3338:	9a 8b       	std	Y+18, r25	; 0x12
    333a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /*array to hold the ASCII result of each number*/
	itoa(data,buff,10); /*itoa c function to convert the integer data to corresponding ASCII vale, 10 --> base 10 for decimal*/
    333c:	89 89       	ldd	r24, Y+17	; 0x11
    333e:	9a 89       	ldd	r25, Y+18	; 0x12
    3340:	9e 01       	movw	r18, r28
    3342:	2f 5f       	subi	r18, 0xFF	; 255
    3344:	3f 4f       	sbci	r19, 0xFF	; 255
    3346:	b9 01       	movw	r22, r18
    3348:	4a e0       	ldi	r20, 0x0A	; 10
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	0e 94 37 1a 	call	0x346e	; 0x346e <itoa>
	LCD_displayString(buff);
    3350:	ce 01       	movw	r24, r28
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_displayString>
}
    3358:	62 96       	adiw	r28, 0x12	; 18
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <LCD_clearScreen>:

/*Send the command that clears the display screen*/
void LCD_clearScreen(void)
{
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
}
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	08 95       	ret

0000337e <__mulsi3>:
    337e:	62 9f       	mul	r22, r18
    3380:	d0 01       	movw	r26, r0
    3382:	73 9f       	mul	r23, r19
    3384:	f0 01       	movw	r30, r0
    3386:	82 9f       	mul	r24, r18
    3388:	e0 0d       	add	r30, r0
    338a:	f1 1d       	adc	r31, r1
    338c:	64 9f       	mul	r22, r20
    338e:	e0 0d       	add	r30, r0
    3390:	f1 1d       	adc	r31, r1
    3392:	92 9f       	mul	r25, r18
    3394:	f0 0d       	add	r31, r0
    3396:	83 9f       	mul	r24, r19
    3398:	f0 0d       	add	r31, r0
    339a:	74 9f       	mul	r23, r20
    339c:	f0 0d       	add	r31, r0
    339e:	65 9f       	mul	r22, r21
    33a0:	f0 0d       	add	r31, r0
    33a2:	99 27       	eor	r25, r25
    33a4:	72 9f       	mul	r23, r18
    33a6:	b0 0d       	add	r27, r0
    33a8:	e1 1d       	adc	r30, r1
    33aa:	f9 1f       	adc	r31, r25
    33ac:	63 9f       	mul	r22, r19
    33ae:	b0 0d       	add	r27, r0
    33b0:	e1 1d       	adc	r30, r1
    33b2:	f9 1f       	adc	r31, r25
    33b4:	bd 01       	movw	r22, r26
    33b6:	cf 01       	movw	r24, r30
    33b8:	11 24       	eor	r1, r1
    33ba:	08 95       	ret

000033bc <__udivmodsi4>:
    33bc:	a1 e2       	ldi	r26, 0x21	; 33
    33be:	1a 2e       	mov	r1, r26
    33c0:	aa 1b       	sub	r26, r26
    33c2:	bb 1b       	sub	r27, r27
    33c4:	fd 01       	movw	r30, r26
    33c6:	0d c0       	rjmp	.+26     	; 0x33e2 <__udivmodsi4_ep>

000033c8 <__udivmodsi4_loop>:
    33c8:	aa 1f       	adc	r26, r26
    33ca:	bb 1f       	adc	r27, r27
    33cc:	ee 1f       	adc	r30, r30
    33ce:	ff 1f       	adc	r31, r31
    33d0:	a2 17       	cp	r26, r18
    33d2:	b3 07       	cpc	r27, r19
    33d4:	e4 07       	cpc	r30, r20
    33d6:	f5 07       	cpc	r31, r21
    33d8:	20 f0       	brcs	.+8      	; 0x33e2 <__udivmodsi4_ep>
    33da:	a2 1b       	sub	r26, r18
    33dc:	b3 0b       	sbc	r27, r19
    33de:	e4 0b       	sbc	r30, r20
    33e0:	f5 0b       	sbc	r31, r21

000033e2 <__udivmodsi4_ep>:
    33e2:	66 1f       	adc	r22, r22
    33e4:	77 1f       	adc	r23, r23
    33e6:	88 1f       	adc	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	1a 94       	dec	r1
    33ec:	69 f7       	brne	.-38     	; 0x33c8 <__udivmodsi4_loop>
    33ee:	60 95       	com	r22
    33f0:	70 95       	com	r23
    33f2:	80 95       	com	r24
    33f4:	90 95       	com	r25
    33f6:	9b 01       	movw	r18, r22
    33f8:	ac 01       	movw	r20, r24
    33fa:	bd 01       	movw	r22, r26
    33fc:	cf 01       	movw	r24, r30
    33fe:	08 95       	ret

00003400 <__prologue_saves__>:
    3400:	2f 92       	push	r2
    3402:	3f 92       	push	r3
    3404:	4f 92       	push	r4
    3406:	5f 92       	push	r5
    3408:	6f 92       	push	r6
    340a:	7f 92       	push	r7
    340c:	8f 92       	push	r8
    340e:	9f 92       	push	r9
    3410:	af 92       	push	r10
    3412:	bf 92       	push	r11
    3414:	cf 92       	push	r12
    3416:	df 92       	push	r13
    3418:	ef 92       	push	r14
    341a:	ff 92       	push	r15
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	ca 1b       	sub	r28, r26
    342a:	db 0b       	sbc	r29, r27
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	09 94       	ijmp

00003438 <__epilogue_restores__>:
    3438:	2a 88       	ldd	r2, Y+18	; 0x12
    343a:	39 88       	ldd	r3, Y+17	; 0x11
    343c:	48 88       	ldd	r4, Y+16	; 0x10
    343e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3440:	6e 84       	ldd	r6, Y+14	; 0x0e
    3442:	7d 84       	ldd	r7, Y+13	; 0x0d
    3444:	8c 84       	ldd	r8, Y+12	; 0x0c
    3446:	9b 84       	ldd	r9, Y+11	; 0x0b
    3448:	aa 84       	ldd	r10, Y+10	; 0x0a
    344a:	b9 84       	ldd	r11, Y+9	; 0x09
    344c:	c8 84       	ldd	r12, Y+8	; 0x08
    344e:	df 80       	ldd	r13, Y+7	; 0x07
    3450:	ee 80       	ldd	r14, Y+6	; 0x06
    3452:	fd 80       	ldd	r15, Y+5	; 0x05
    3454:	0c 81       	ldd	r16, Y+4	; 0x04
    3456:	1b 81       	ldd	r17, Y+3	; 0x03
    3458:	aa 81       	ldd	r26, Y+2	; 0x02
    345a:	b9 81       	ldd	r27, Y+1	; 0x01
    345c:	ce 0f       	add	r28, r30
    345e:	d1 1d       	adc	r29, r1
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	ed 01       	movw	r28, r26
    346c:	08 95       	ret

0000346e <itoa>:
    346e:	fb 01       	movw	r30, r22
    3470:	9f 01       	movw	r18, r30
    3472:	e8 94       	clt
    3474:	42 30       	cpi	r20, 0x02	; 2
    3476:	c4 f0       	brlt	.+48     	; 0x34a8 <itoa+0x3a>
    3478:	45 32       	cpi	r20, 0x25	; 37
    347a:	b4 f4       	brge	.+44     	; 0x34a8 <itoa+0x3a>
    347c:	4a 30       	cpi	r20, 0x0A	; 10
    347e:	29 f4       	brne	.+10     	; 0x348a <itoa+0x1c>
    3480:	97 fb       	bst	r25, 7
    3482:	1e f4       	brtc	.+6      	; 0x348a <itoa+0x1c>
    3484:	90 95       	com	r25
    3486:	81 95       	neg	r24
    3488:	9f 4f       	sbci	r25, 0xFF	; 255
    348a:	64 2f       	mov	r22, r20
    348c:	77 27       	eor	r23, r23
    348e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <__udivmodhi4>
    3492:	80 5d       	subi	r24, 0xD0	; 208
    3494:	8a 33       	cpi	r24, 0x3A	; 58
    3496:	0c f0       	brlt	.+2      	; 0x349a <itoa+0x2c>
    3498:	89 5d       	subi	r24, 0xD9	; 217
    349a:	81 93       	st	Z+, r24
    349c:	cb 01       	movw	r24, r22
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	a1 f7       	brne	.-24     	; 0x348a <itoa+0x1c>
    34a2:	16 f4       	brtc	.+4      	; 0x34a8 <itoa+0x3a>
    34a4:	5d e2       	ldi	r21, 0x2D	; 45
    34a6:	51 93       	st	Z+, r21
    34a8:	10 82       	st	Z, r1
    34aa:	c9 01       	movw	r24, r18
    34ac:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <strrev>

000034b0 <strrev>:
    34b0:	dc 01       	movw	r26, r24
    34b2:	fc 01       	movw	r30, r24
    34b4:	67 2f       	mov	r22, r23
    34b6:	71 91       	ld	r23, Z+
    34b8:	77 23       	and	r23, r23
    34ba:	e1 f7       	brne	.-8      	; 0x34b4 <strrev+0x4>
    34bc:	32 97       	sbiw	r30, 0x02	; 2
    34be:	04 c0       	rjmp	.+8      	; 0x34c8 <strrev+0x18>
    34c0:	7c 91       	ld	r23, X
    34c2:	6d 93       	st	X+, r22
    34c4:	70 83       	st	Z, r23
    34c6:	62 91       	ld	r22, -Z
    34c8:	ae 17       	cp	r26, r30
    34ca:	bf 07       	cpc	r27, r31
    34cc:	c8 f3       	brcs	.-14     	; 0x34c0 <strrev+0x10>
    34ce:	08 95       	ret

000034d0 <__udivmodhi4>:
    34d0:	aa 1b       	sub	r26, r26
    34d2:	bb 1b       	sub	r27, r27
    34d4:	51 e1       	ldi	r21, 0x11	; 17
    34d6:	07 c0       	rjmp	.+14     	; 0x34e6 <__udivmodhi4_ep>

000034d8 <__udivmodhi4_loop>:
    34d8:	aa 1f       	adc	r26, r26
    34da:	bb 1f       	adc	r27, r27
    34dc:	a6 17       	cp	r26, r22
    34de:	b7 07       	cpc	r27, r23
    34e0:	10 f0       	brcs	.+4      	; 0x34e6 <__udivmodhi4_ep>
    34e2:	a6 1b       	sub	r26, r22
    34e4:	b7 0b       	sbc	r27, r23

000034e6 <__udivmodhi4_ep>:
    34e6:	88 1f       	adc	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	5a 95       	dec	r21
    34ec:	a9 f7       	brne	.-22     	; 0x34d8 <__udivmodhi4_loop>
    34ee:	80 95       	com	r24
    34f0:	90 95       	com	r25
    34f2:	bc 01       	movw	r22, r24
    34f4:	cd 01       	movw	r24, r26
    34f6:	08 95       	ret

000034f8 <_exit>:
    34f8:	f8 94       	cli

000034fa <__stop_program>:
    34fa:	ff cf       	rjmp	.-2      	; 0x34fa <__stop_program>
